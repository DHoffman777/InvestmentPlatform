import { EventEmitter } from 'events';
import { Dependency } from './DependencyInventoryService';
export interface Vulnerability {
    id: string;
    cve?: string;
    ghsa?: string;
    osvId?: string;
    title: string;
    description: string;
    severity: 'CRITICAL' | 'HIGH' | 'MEDIUM' | 'LOW' | 'INFO';
    cvssScore?: number;
    cvssVector?: string;
    cwe?: string[];
    packageName: string;
    ecosystem: string;
    affectedVersions: VersionRange[];
    patchedVersions: VersionRange[];
    publishedAt: Date;
    updatedAt: Date;
    references: VulnerabilityReference[];
    advisories: Advisory[];
    exploitability?: 'FUNCTIONAL' | 'POC' | 'UNPROVEN' | 'HIGH' | 'NOT_DEFINED';
    fixAvailable: boolean;
    fixComplexity?: 'LOW' | 'MEDIUM' | 'HIGH';
    dataSource: string;
    lastChecked: Date;
}
export interface VersionRange {
    operator: '<' | '<=' | '>' | '>=' | '=' | '!=' | '~' | '^';
    version: string;
    inclusive?: boolean;
}
export interface VulnerabilityReference {
    type: 'ADVISORY' | 'ARTICLE' | 'REPORT' | 'WEB' | 'EVIDENCE';
    url: string;
    source?: string;
}
export interface Advisory {
    id: string;
    source: string;
    severity: string;
    summary: string;
    url?: string;
}
export interface VulnerabilityMatch {
    vulnerability: Vulnerability;
    dependency: Dependency;
    matchType: 'EXACT' | 'VERSION_RANGE' | 'FUZZY';
    confidence: number;
    matchedVersion: string;
    fixAvailable: boolean;
    recommendedAction: 'UPDATE' | 'PATCH' | 'REPLACE' | 'MONITOR' | 'IGNORE';
    context?: {
        transitivePath?: string[];
        directImpact: boolean;
        runtimeReachable?: boolean;
    };
}
export interface VulnerabilityDatabase {
    name: string;
    url: string;
    apiKey?: string;
    rateLimitPerMinute: number;
    supportedEcosystems: string[];
    lastUpdated?: Date;
    recordCount?: number;
}
export interface ScanReport {
    scanId: string;
    inventoryId: string;
    totalDependencies: number;
    vulnerableDependencies: number;
    totalVulnerabilities: number;
    severityBreakdown: Record<string, number>;
    matches: VulnerabilityMatch[];
    scanDuration: number;
    completedAt: Date;
    databasesUsed: string[];
    errors: string[];
}
export declare class VulnerabilityDatabaseService extends EventEmitter {
    private databases;
    private vulnerabilityCache;
    private scanReports;
    private rateLimiters;
    constructor();
    private initializeDefaultDatabases;
    scanDependencies(dependencies: Dependency[], inventoryId: string, options?: {
        databases?: string[];
        includeTransitive?: boolean;
        severityThreshold?: string;
        maxConcurrency?: number;
    }): Promise<ScanReport>;
    private scanDependency;
    private queryDatabase;
    private queryOSVDatabase;
    private parseOSVResponse;
    private queryGHSADatabase;
    private parseGHSAResponse;
    private queryNVDDatabase;
    private parseNVDResponse;
    private querySnykDatabase;
    private querySonatypeDatabase;
    private buildSonatypeCoordinate;
    private parseSonatypeResponse;
    private deduplicateVulnerabilities;
    private createVulnerabilityMatch;
    private isVersionAffected;
    private compareVersions;
    private determineRecommendedAction;
    private parseVersionRanges;
    private parseGHSAVersionRange;
    private mapSeverity;
    private mapCVSSSeverity;
    private filterBySeverity;
    private calculateSeverityBreakdown;
    private enforceRateLimit;
    private chunkArray;
    private generateScanId;
    getScanReport(scanId: string): ScanReport | undefined;
    getVulnerabilityById(vulnerabilityId: string): Vulnerability | undefined;
    refreshVulnerabilityData(packageName: string, ecosystem: string): Promise<void>;
    getRecentScans(limit?: number): ScanReport[];
    getScanMetrics(): any;
    private getDatabaseUsageStats;
}
