import { Router } from 'express';
import { EventEmitter } from 'events';
import { DependencyInventoryService } from './DependencyInventoryService';
import { VulnerabilityDatabaseService } from './VulnerabilityDatabaseService';
import { AutomatedScanningWorkflowService } from './AutomatedScanningWorkflowService';
import { RiskAssessmentService } from './RiskAssessmentService';
import { UpdateRecommendationEngine } from './UpdateRecommendationEngine';
import { ComplianceReportingService } from './ComplianceReportingService';
import { DependencyPolicyService } from './DependencyPolicyService';
export interface AuthenticatedRequest {
    user?: {
        id: string;
        tenantId: string;
        role: string;
        permissions: string[];
    };
    tenantId?: string;
    params: any;
    query: any;
    body: any;
}
export declare class DependencyScannerController extends EventEmitter {
    private inventoryService;
    private vulnerabilityService;
    private workflowService;
    private riskService;
    private recommendationEngine;
    private reportingService;
    private policyService;
    private router;
    constructor(inventoryService: DependencyInventoryService, vulnerabilityService: VulnerabilityDatabaseService, workflowService: AutomatedScanningWorkflowService, riskService: RiskAssessmentService, recommendationEngine: UpdateRecommendationEngine, reportingService: ComplianceReportingService, policyService: DependencyPolicyService);
    private setupEventListeners;
    private setupRoutes;
    private validateScanProject;
    private validateInventoryId;
    private validateGetInventories;
    private validateGetDependencies;
    private validateVulnerabilityScan;
    private validateScanId;
    private validateVulnerabilityId;
    private validateGetScans;
    private validateRefreshVulnerabilities;
    private validateCreateSchedule;
    private validateScheduleId;
    private validateUpdateSchedule;
    private validateExecutionId;
    private validateGetExecutions;
    private validateRiskAssessment;
    private validateAssessmentId;
    private validateGetAssessments;
    private validatePrioritizeRisk;
    private validateBusinessContext;
    private validateGenerateRecommendations;
    private validateRecommendationId;
    private validateGetRecommendations;
    private validateRecommendationAction;
    private validateCreateBatch;
    private validateBatchId;
    private validateUpdateStrategy;
    private validateGenerateReport;
    private validateReportId;
    private validateGetReports;
    private validateReportAction;
    private validateScheduleReport;
    private validateCreatePolicy;
    private validateCreateFromTemplate;
    private validatePolicyId;
    private validateGetPolicies;
    private validateUpdatePolicy;
    private validateEvaluatePolicies;
    private validateTemplateId;
    private validateViolationId;
    private validateGetViolations;
    private validateResolveViolation;
    private validateEvaluationId;
    private validateAnalyticsQuery;
    private validateTenantAccess;
    private handleValidationErrors;
    private scanProject;
    private getInventory;
    private getInventories;
    private rescanInventory;
    private deleteInventory;
    private getDependencies;
    private getInventoryMetrics;
    private scanVulnerabilities;
    private getScanReport;
    private getRecentScans;
    private getVulnerability;
    private refreshVulnerabilityData;
    private getVulnerabilityMetrics;
    private getDashboardOverview;
    private getSecurityDashboard;
    private getComplianceDashboard;
    private getTrends;
    private getInsights;
    private createSchedule;
    private getSchedule;
    private getSchedules;
    private updateSchedule;
    private deleteSchedule;
    private executeSchedule;
    private enableSchedule;
    private disableSchedule;
    private getExecution;
    private getExecutions;
    private cancelExecution;
    private getWorkflowMetrics;
    private assessRisk;
    private getRiskAssessment;
    private getRiskAssessments;
    private reassessRisk;
    private prioritizeRiskAssessments;
    private setBusinessContext;
    private getBusinessContext;
    private getRiskMetrics;
    private generateRecommendations;
    private getRecommendation;
    private getRecommendations;
    private approveRecommendation;
    private rejectRecommendation;
    private createUpdateBatch;
    private getBatch;
    private setUpdateStrategy;
    private getUpdateStrategy;
    private getRecommendationMetrics;
    private generateReport;
    private getReport;
    private getReports;
    private approveReport;
    private distributeReport;
    private scheduleReport;
    private unscheduleReport;
    private getComplianceMetrics;
    private createPolicy;
    private createPolicyFromTemplate;
    private getPolicy;
    private getPolicies;
    private updatePolicy;
    private deletePolicy;
    private evaluatePolicies;
    private getPolicyTemplates;
    private getPolicyTemplate;
    private getViolation;
    private getViolations;
    private resolveViolation;
    private getEvaluationResult;
    private getPolicyMetrics;
    getRouter(): Router;
}
