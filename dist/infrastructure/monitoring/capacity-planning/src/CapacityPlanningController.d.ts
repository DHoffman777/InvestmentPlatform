import express from 'express';
import { EventEmitter } from 'events';
import { ResourceUsagePredictionService } from './ResourceUsagePredictionService';
import { ScalingThresholdMonitor } from './ScalingThresholdMonitor';
import { CapacityTrendAnalyzer } from './CapacityTrendAnalyzer';
import { AutomatedScalingRecommendationEngine } from './AutomatedScalingRecommendationEngine';
import { CapacityPlanningReportGenerator } from './CapacityPlanningReportGenerator';
import { CostOptimizationService } from './CostOptimizationService';
import { CapacityAlertWorkflowManager } from './CapacityAlertWorkflowManager';
export interface CapacityPlanningAPIConfig {
    port: number;
    rateLimitWindowMs: number;
    rateLimitMaxRequests: number;
    enableCors: boolean;
    enableCompression: boolean;
    maxPayloadSize: string;
    apiVersion: string;
    authenticationRequired: boolean;
    enableSwaggerDocs: boolean;
    metricsEnabled: boolean;
}
export interface ServiceDependencies {
    predictionService: ResourceUsagePredictionService;
    thresholdMonitor: ScalingThresholdMonitor;
    trendAnalyzer: CapacityTrendAnalyzer;
    recommendationEngine: AutomatedScalingRecommendationEngine;
    reportGenerator: CapacityPlanningReportGenerator;
    costOptimizationService: CostOptimizationService;
    workflowManager: CapacityAlertWorkflowManager;
}
export declare class CapacityPlanningController extends EventEmitter {
    private app;
    private config;
    private services;
    private metrics;
    constructor(config: CapacityPlanningAPIConfig, services: ServiceDependencies);
    private setupMiddleware;
    private setupRoutes;
    private setupPredictionRoutes;
    private setupThresholdRoutes;
    private setupTrendAnalysisRoutes;
    private setupRecommendationRoutes;
    private setupReportingRoutes;
    private setupCostOptimizationRoutes;
    private setupWorkflowRoutes;
    private setupSystemRoutes;
    private createPredictionModel;
    private getPredictionModels;
    private getPredictionModel;
    private updatePredictionModel;
    private deletePredictionModel;
    private trainPredictionModel;
    private optimizePredictionModel;
    private getPredictionModelPerformance;
    private generatePrediction;
    private batchGeneratePredictions;
    private getPrediction;
    private getResourcePredictions;
    private createScalingThreshold;
    private getScalingThresholds;
    private getScalingThreshold;
    private updateScalingThreshold;
    private deleteScalingThreshold;
    private evaluateThresholds;
    private getCapacityAlerts;
    private getCapacityAlert;
    private acknowledgeAlert;
    private resolveAlert;
    private suppressAlert;
    private getAlertMetrics;
    private analyzeTrend;
    private batchAnalyzeTrends;
    private getTrend;
    private getResourceTrends;
    private detectAnomalies;
    private compareResourceTrends;
    private getTrendSummary;
    private generateRecommendations;
    private batchGenerateRecommendations;
    private getRecommendation;
    private getRecommendations;
    private submitRecommendationFeedback;
    private getRecommendationEffectiveness;
    private getResourceRecommendations;
    private generateReport;
    private scheduleReport;
    private getReport;
    private getReports;
    private cancelScheduledReport;
    private createReportTemplate;
    private getReportTemplates;
    private getReportTemplate;
    private generateExecutiveSummaryReport;
    private analyzeCostOptimization;
    private batchAnalyzeCostOptimization;
    private getCostOptimization;
    private getAllCostOptimizations;
    private implementOptimization;
    private trackOptimizationROI;
    private generateCostForecast;
    private getTopOptimizationOpportunities;
    private createWorkflowTemplate;
    private getWorkflowTemplates;
    private getWorkflowTemplate;
    private executeWorkflow;
    private getWorkflowExecution;
    private getWorkflowExecutions;
    private approveWorkflowStep;
    private rejectWorkflowStep;
    private cancelWorkflowExecution;
    private getWorkflowMetrics;
    private getSystemStatus;
    private getSystemMetrics;
    private scheduleSystemMaintenance;
    private getSystemConfiguration;
    private updateSystemConfiguration;
    private metricsMiddleware;
    private authenticationMiddleware;
    private setupErrorHandling;
    private handleError;
    private healthCheck;
    private systemMetrics;
    private setupSwaggerDocs;
    start(): Promise<any>;
    getApp(): express.Application;
}
