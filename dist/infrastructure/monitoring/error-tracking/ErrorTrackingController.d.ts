import { Router } from 'express';
import { AutoRecoveryConfig } from './ErrorRecoveryService';
import { PrismaClient } from '@prisma/client';
export interface ErrorTrackingControllerConfig {
    prisma: PrismaClient;
    autoRecoveryConfig: AutoRecoveryConfig;
}
export declare class ErrorTrackingController {
    private router;
    private errorTrackingService;
    private notificationService;
    private dashboardService;
    private correlationService;
    private recoveryService;
    constructor(config: ErrorTrackingControllerConfig);
    private setupServiceIntegrations;
    private setupRoutes;
    private validateGetErrors;
    private validateErrorId;
    private validateResolveError;
    private validateDashboardMetrics;
    private validateDashboardSummaries;
    private validateStatistics;
    private validateCreateReport;
    private validateReportId;
    private validateCreateAlert;
    private validateUpdateAlert;
    private validateAlertId;
    private validateCreateChannel;
    private validateUpdateChannel;
    private validateChannelId;
    private validateCreateStrategy;
    private validateExecuteRecovery;
    private validateExecutionId;
    private validateCancelRecovery;
    private validateCreateCorrelationRule;
    private validateCreateCorrelationPattern;
    private validateCreateErrorPattern;
    private validatePatternId;
    private handleValidationErrors;
    private getErrors;
    private getError;
    private resolveError;
    private getErrorCorrelations;
    private correlateError;
    private getErrorRootCause;
    private getDashboardMetrics;
    private getErrorSummaries;
    private getErrorStatistics;
    private getReports;
    private createReport;
    private getReport;
    private generateReport;
    private getAlertRules;
    private createAlertRule;
    private updateAlertRule;
    private deleteAlertRule;
    private getNotificationChannels;
    private createNotificationChannel;
    private updateNotificationChannel;
    private deleteNotificationChannel;
    private testNotificationChannel;
    private getRecoveryStrategies;
    private createRecoveryStrategy;
    private getRecoverySuggestions;
    private executeRecovery;
    private getRecoveryExecutions;
    private getRecoveryExecution;
    private cancelRecovery;
    private getCorrelationRules;
    private createCorrelationRule;
    private getCorrelationPatterns;
    private createCorrelationPattern;
    private getErrorPatterns;
    private createErrorPattern;
    private deleteErrorPattern;
    private getHealth;
    private getStatus;
    private errorHandler;
    private handleError;
    getRouter(): Router;
    shutdown(): Promise<any>;
}
