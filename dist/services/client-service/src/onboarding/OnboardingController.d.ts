import { Router, Request } from 'express';
import { EventEmitter } from 'events';
import { OnboardingWorkflowStateMachine } from './OnboardingWorkflowStateMachine';
import { DocumentCollectionService } from './DocumentCollectionService';
import { KYCAMLIntegrationService } from './KYCAMLIntegrationService';
import { IdentityVerificationService } from './IdentityVerificationService';
import { AccountSetupService } from './AccountSetupService';
import { ComplianceApprovalService } from './ComplianceApprovalService';
import { OnboardingProgressService } from './OnboardingProgressService';
export interface OnboardingNotificationService {
    sendWelcomeNotification(clientId: string, workflowId: string): Promise<any>;
    sendStepReminderNotification(clientId: string, stepName: string): Promise<any>;
    sendMilestoneNotification(clientId: string, milestoneName: string): Promise<any>;
    sendCompletionNotification(clientId: string, workflowId: string): Promise<any>;
    sendDelayNotification(clientId: string, reason: string, newEstimate: Date): Promise<any>;
}
export type AuthenticatedRequest = Request & {
    user?: {
        id: string;
        tenantId: string;
        role: string;
        permissions: string[];
    };
    clientId?: string;
    tenantId?: string;
};
export declare class OnboardingController extends EventEmitter {
    private router;
    private workflowStateMachine;
    private documentService;
    private kycAmlService;
    private identityService;
    private accountSetupService;
    private complianceService;
    private progressService;
    private notificationService;
    constructor(workflowStateMachine: OnboardingWorkflowStateMachine, documentService: DocumentCollectionService, kycAmlService: KYCAMLIntegrationService, identityService: IdentityVerificationService, accountSetupService: AccountSetupService, complianceService: ComplianceApprovalService, progressService: OnboardingProgressService, notificationService: OnboardingNotificationService);
    private setupEventListeners;
    private handleStateTransition;
    private setupRoutes;
    private validateCreateWorkflow;
    private validateWorkflowId;
    private validateGetWorkflows;
    private validateProcessEvent;
    private validateSubmitDocument;
    private validateCreateVerificationSession;
    private validateSessionId;
    private validateDocumentVerification;
    private validateBiometricVerification;
    private validateKBA;
    private validateKBAAnswers;
    private validateUpdateKYC;
    private validateKYCReview;
    private validateInitiateAccountSetup;
    private validateUpdateAccountSetup;
    private validateComplianceDecision;
    private validateReportBlocker;
    private validateResolveBlocker;
    private validateAnalyticsRequest;
    private validateClientId;
    private validateAdminAccess;
    private handleValidationErrors;
    private checkAdminPermissions;
    private createWorkflow;
    private getWorkflow;
    private getWorkflows;
    private processEvent;
    private getAvailableEvents;
    private submitDocument;
    private getProgress;
    private getProgressSummary;
    private getDocuments;
    private getDocumentRequirements;
    private getDocumentStatus;
    private createVerificationSession;
    private getVerificationSession;
    private startDocumentVerification;
    private startBiometricVerification;
    private startKBA;
    private submitKBAAnswers;
    private getKYCProfile;
    private updateKYCProfile;
    private reviewKYCProfile;
    private getAMLScreeningResults;
    private initiateAccountSetup;
    private getAccountSetup;
    private updateAccountSetup;
    private getComplianceWorkflow;
    private submitComplianceDecision;
    private reportBlocker;
    private resolveBlocker;
    private getWorkflowAnalytics;
    private getDocumentAnalytics;
    private getIdentityVerificationAnalytics;
    private getComplianceAnalytics;
    private getProgressAnalytics;
    private getClientWorkflows;
    private getClientProgress;
    private getClientNextActions;
    private getPendingWorkflows;
    private getComplianceQueue;
    private getAdminDashboard;
    getRouter(): Router;
}
export declare class MockOnboardingNotificationService implements OnboardingNotificationService {
    sendWelcomeNotification(clientId: string, workflowId: string): Promise<any>;
    sendStepReminderNotification(clientId: string, stepName: string): Promise<any>;
    sendMilestoneNotification(clientId: string, milestoneName: string): Promise<any>;
    sendCompletionNotification(clientId: string, workflowId: string): Promise<any>;
    sendDelayNotification(clientId: string, reason: string, newEstimate: Date): Promise<any>;
}
