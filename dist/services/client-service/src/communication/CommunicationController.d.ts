import express from 'express';
import { CommunicationService } from './CommunicationService';
import { CommunicationAnalyticsService } from './CommunicationAnalyticsService';
import { ComplianceRecordingService } from './ComplianceRecordingService';
import { CommunicationTimelineService } from './CommunicationTimelineService';
export interface CommunicationControllerConfig {
    rateLimiting: {
        windowMs: number;
        maxRequests: number;
        skipSuccessfulRequests: boolean;
    };
    validation: {
        enableStrict: boolean;
        maxContentLength: number;
        allowedFileTypes: string[];
        maxFileSize: number;
    };
    features: {
        enableAnalytics: boolean;
        enableRecording: boolean;
        enableTimeline: boolean;
        enableRealTime: boolean;
    };
    security: {
        enableCors: boolean;
        allowedOrigins: string[];
        enableHelmet: boolean;
        requireAuth: boolean;
    };
}
export declare class CommunicationController {
    private app;
    private communicationService;
    private analyticsService?;
    private recordingService?;
    private timelineService?;
    private config;
    constructor(communicationService: CommunicationService, analyticsService?: CommunicationAnalyticsService, recordingService?: ComplianceRecordingService, timelineService?: CommunicationTimelineService, config?: Partial<CommunicationControllerConfig>);
    private setupMiddleware;
    private authenticateRequest;
    private setupRoutes;
    private validateCreateCommunication;
    private validateGetCommunications;
    private validateGetCommunication;
    private validateUpdateCommunication;
    private validateDeleteCommunication;
    private validateSearchCommunications;
    private validateGetClientCommunications;
    private validateGetMetrics;
    private validateGetTrends;
    private validateGetClientProfile;
    private validateGenerateReport;
    private validateGetSentiment;
    private validateGetRiskFactors;
    private validateStartRecording;
    private validateStopRecording;
    private validateSearchRecordings;
    private validateCreatePolicy;
    private validateExtendRetention;
    private validateLegalHold;
    private validatePerformAudit;
    private validateGenerateComplianceReport;
    private validateCreateTimelineEntry;
    private validateUpdateTimelineEntry;
    private validateDeleteTimelineEntry;
    private validateCreateTimelineView;
    private validateCreateTimelineTemplate;
    private validateApplyTemplate;
    private validateSearchTimeline;
    private validateExportTimeline;
    private handleValidationErrors;
    private createCommunication;
    private getCommunications;
    private getCommunication;
    private updateCommunication;
    private deleteCommunication;
    private searchCommunications;
    private getClientCommunications;
    private getCommunicationMetrics;
    private getCommunicationTrends;
    private getClientCommunicationProfile;
    private generateCommunicationReport;
    private performSentimentAnalysis;
    private getClientRiskFactors;
    private startRecordingSession;
    private stopRecordingSession;
    private pauseRecording;
    private resumeRecording;
    private searchRecordings;
    private createCompliancePolicy;
    private extendRetentionPeriod;
    private placeRecordingOnLegalHold;
    private performComplianceAudit;
    private generateComplianceReport;
    private addTimelineEntry;
    private updateTimelineEntry;
    private deleteTimelineEntry;
    private createTimelineView;
    private getTimelineView;
    private createTimelineTemplate;
    private applyTemplate;
    private searchTimeline;
    private exportTimeline;
    private generatePredictiveInsights;
    private healthCheck;
    private getSystemMetrics;
    private setupErrorHandling;
    getApp(): express.Application;
    shutdown(): Promise<any>;
}
