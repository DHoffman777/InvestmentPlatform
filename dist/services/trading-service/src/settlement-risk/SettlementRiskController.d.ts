import express from 'express';
export declare class SettlementRiskController {
    private router;
    private riskCalculationEngine;
    private counterpartyRiskService;
    private timelineTrackingService;
    private preSettlementChecksService;
    private failurePredictionService;
    private mitigationWorkflowsService;
    private reportingService;
    constructor();
    private initializeRoutes;
    private authenticateUser;
    private validateRequest;
    private validateRiskCalculationInput;
    private validateCounterpartyProfile;
    private validateExposureLimit;
    private validateCreditEvent;
    private validateSettlementInstruction;
    private validateTradeOrder;
    private validatePredictionInput;
    private validateRiskLimit;
    private validateComplianceRule;
    private validateWorkflow;
    private validateReportRequest;
    private validateReportTemplate;
    private validateReportSchedule;
    private calculateSettlementRisk;
    private getRiskAssessment;
    private getAllRiskAssessments;
    private getHighRiskInstructions;
    private getRiskSummary;
    private createCounterpartyProfile;
    private updateCounterpartyProfile;
    private performCounterpartyRiskAssessment;
    private getCounterpartyProfile;
    private getCounterpartyRiskMetrics;
    private getAllCounterparties;
    private getHighRiskCounterparties;
    private addExposureLimit;
    private recordCreditEvent;
    private createSettlementInstruction;
    private updateMilestoneStatus;
    private getSettlementTimeline;
    private getSettlementInstructions;
    private getPendingMilestones;
    private getOverdueMilestones;
    private getActiveAlerts;
    private acknowledgeAlert;
    private generatePerformanceReport;
    private executePreSettlementChecks;
    private getRiskCheckSuite;
    private getRiskCheckHistory;
    private bypassRiskCheck;
    private getRiskCheckAlerts;
    private getRiskCheckSummary;
    private addRiskLimit;
    private addComplianceRule;
    private predictSettlementFailure;
    private getLatestPrediction;
    private getPredictionHistory;
    private getHighRiskPredictions;
    private updatePredictionAccuracy;
    private getModelPerformance;
    private getFailurePatterns;
    private getPredictionSummary;
    private triggerWorkflow;
    private getWorkflowExecution;
    private getInstructionWorkflows;
    private getActiveWorkflowExecutions;
    private pauseWorkflowExecution;
    private resumeWorkflowExecution;
    private cancelWorkflowExecution;
    private getAllWorkflows;
    private createWorkflow;
    private getWorkflowReport;
    private generateReport;
    private getReport;
    private getReports;
    private getReportTemplates;
    private createReportTemplate;
    private createReportSchedule;
    private getReportSchedules;
    private updateReportSchedule;
    private deleteReportSchedule;
    private getReportingSummary;
    private getHealthStatus;
    private getSystemMetrics;
    getRouter(): express.Router;
}
