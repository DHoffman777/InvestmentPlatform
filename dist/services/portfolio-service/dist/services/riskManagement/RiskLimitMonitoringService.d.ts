export const __esModule: boolean;
export class RiskLimitMonitoringService {
    constructor(prisma: any, kafkaProducer?: any, customLogger?: import("winston").Logger);
    prisma: any;
    kafkaProducer: any;
    logger: import("winston").Logger;
    monitorRiskLimits(request: any): Promise<{
        id: string;
        portfolioId: any;
        entityId: any;
        tenantId: any;
        assessmentDate: Date;
        asOfDate: any;
        totalLimitsMonitored: number;
        totalBreaches: number;
        criticalBreaches: number;
        overallUtilizationPercentage: number;
        riskLimits: ({
            id: string;
            name: string;
            type: string;
            scope: string;
            entityId: any;
            currency: string;
            limitValue: number;
            softLimitValue: number;
            warningThreshold: number;
            breachThreshold: number;
            escalationThreshold: number;
            measurementMethod: string;
            timeHorizon: string;
            confidenceLevel: number;
            isActive: boolean;
            effectiveDate: Date;
            expiryDate: Date;
            reviewFrequency: string;
            lastReviewDate: Date;
            nextReviewDate: Date;
            approvedBy: string;
            createdAt: Date;
            updatedAt: Date;
        } | {
            id: string;
            name: string;
            type: string;
            scope: string;
            entityId: any;
            currency: string;
            limitValue: number;
            softLimitValue: number;
            warningThreshold: number;
            breachThreshold: number;
            escalationThreshold: number;
            measurementMethod: string;
            timeHorizon: string;
            isActive: boolean;
            effectiveDate: Date;
            expiryDate: Date;
            reviewFrequency: string;
            lastReviewDate: Date;
            nextReviewDate: Date;
            approvedBy: string;
            createdAt: Date;
            updatedAt: Date;
            confidenceLevel?: undefined;
        })[];
        currentRiskMetrics: ({
            metricType: string;
            value: number;
            currency: string;
            asOfDate: any;
            calculationMethod: string;
            confidenceLevel: number;
            timeHorizon: string;
            additionalData?: undefined;
        } | {
            metricType: string;
            value: number;
            currency: string;
            asOfDate: any;
            calculationMethod: string;
            additionalData: {
                issuerConcentrations: {};
            };
            confidenceLevel?: undefined;
            timeHorizon?: undefined;
        } | {
            metricType: string;
            value: any;
            currency: string;
            asOfDate: any;
            calculationMethod: string;
            confidenceLevel?: undefined;
            timeHorizon?: undefined;
            additionalData?: undefined;
        })[];
        limitUtilizations: {
            id: string;
            limitId: any;
            limitName: any;
            limitType: any;
            limitValue: any;
            softLimitValue: any;
            currentValue: any;
            utilizationPercentage: number;
            softUtilizationPercentage: number;
            availableCapacity: number;
            timeToLimit: number;
            lastUpdated: Date;
            trend: string;
            isBreached: boolean;
            isSoftBreached: boolean;
            isWarning: boolean;
            daysToReview: number;
        }[];
        breaches: {
            id: string;
            limitId: any;
            limitName: any;
            limitType: any;
            breachType: string;
            severity: string;
            breachValue: any;
            limitValue: any;
            excessAmount: number;
            excessPercentage: number;
            breachDate: Date;
            timeInBreach: number;
            isEscalated: boolean;
            escalationLevel: string;
            requiresApproval: boolean;
            impactAssessment: string;
            recommendedActions: string[];
        }[];
        alerts: ({
            id: string;
            type: string;
            severity: any;
            limitId: any;
            limitName: any;
            message: string;
            description: string;
            currentValue: any;
            limitValue: any;
            excessAmount: any;
            isActive: boolean;
            requiresAction: boolean;
            createdAt: Date;
            acknowledgedAt: any;
            acknowledgedBy: any;
            resolvedAt: any;
            resolvedBy: any;
            utilizationPercentage?: undefined;
            availableCapacity?: undefined;
        } | {
            id: string;
            type: string;
            severity: string;
            limitId: any;
            limitName: any;
            message: string;
            description: string;
            currentValue: any;
            limitValue: any;
            utilizationPercentage: any;
            isActive: boolean;
            requiresAction: boolean;
            createdAt: Date;
            acknowledgedAt: any;
            acknowledgedBy: any;
            resolvedAt: any;
            resolvedBy: any;
            excessAmount?: undefined;
            availableCapacity?: undefined;
        } | {
            id: string;
            type: string;
            severity: string;
            limitId: any;
            limitName: any;
            message: string;
            description: string;
            currentValue: any;
            limitValue: any;
            availableCapacity: any;
            isActive: boolean;
            requiresAction: boolean;
            createdAt: Date;
            acknowledgedAt: any;
            acknowledgedBy: any;
            resolvedAt: any;
            resolvedBy: any;
            excessAmount?: undefined;
            utilizationPercentage?: undefined;
        })[];
        escalations: {
            id: string;
            breachId: any;
            limitId: any;
            limitName: any;
            escalationLevel: any;
            escalationDate: Date;
            escalatedTo: any;
            escalationReason: string;
            status: string;
            dueDate: Date;
            acknowledgedAt: any;
            acknowledgedBy: any;
            resolvedAt: any;
            resolvedBy: any;
            resolutionNotes: any;
        }[];
        approvals: {
            id: string;
            breachId: any;
            limitId: any;
            limitName: any;
            approvalType: string;
            requestedBy: string;
            requestDate: Date;
            requiredApprover: any;
            approvalReason: string;
            status: string;
            dueDate: Date;
            approvedAt: any;
            approvedBy: any;
            rejectedAt: any;
            rejectedBy: any;
            approvalNotes: any;
        }[];
        trends: {
            limitId: any;
            limitName: any;
            timeFrame: string;
            currentUtilization: number;
            averageUtilization: number;
            peakUtilization: number;
            minimumUtilization: number;
            trendDirection: string;
            volatility: number;
            breachFrequency: number;
            daysInBreach: number;
            forecastedUtilization: number;
            riskScore: number;
        }[];
        recommendations: {
            id: string;
            type: string;
            priority: string;
            limitId: any;
            limitName: any;
            title: string;
            description: string;
            actions: any;
            expectedImpact: string;
            implementationTimeframe: string;
            estimatedCost: number;
            riskReduction: any;
        }[];
        consolidatedLimits: {
            limitType: any;
            numberOfLimits: any;
            totalLimitValue: any;
            totalUtilization: any;
            utilizationPercentage: number;
            availableCapacity: number;
            numberOfBreaches: any;
            averageUtilization: number;
            maxUtilization: number;
            minUtilization: number;
        }[];
        calculationTime: number;
        createdAt: Date;
        assessedBy: any;
    }>;
    monitorAllPortfolioLimits(request: any): Promise<{
        id: string;
        portfolioId: any;
        entityId: any;
        tenantId: any;
        assessmentDate: Date;
        asOfDate: any;
        totalLimitsMonitored: number;
        totalBreaches: number;
        criticalBreaches: number;
        overallUtilizationPercentage: number;
        riskLimits: ({
            id: string;
            name: string;
            type: string;
            scope: string;
            entityId: any;
            currency: string;
            limitValue: number;
            softLimitValue: number;
            warningThreshold: number;
            breachThreshold: number;
            escalationThreshold: number;
            measurementMethod: string;
            timeHorizon: string;
            confidenceLevel: number;
            isActive: boolean;
            effectiveDate: Date;
            expiryDate: Date;
            reviewFrequency: string;
            lastReviewDate: Date;
            nextReviewDate: Date;
            approvedBy: string;
            createdAt: Date;
            updatedAt: Date;
        } | {
            id: string;
            name: string;
            type: string;
            scope: string;
            entityId: any;
            currency: string;
            limitValue: number;
            softLimitValue: number;
            warningThreshold: number;
            breachThreshold: number;
            escalationThreshold: number;
            measurementMethod: string;
            timeHorizon: string;
            isActive: boolean;
            effectiveDate: Date;
            expiryDate: Date;
            reviewFrequency: string;
            lastReviewDate: Date;
            nextReviewDate: Date;
            approvedBy: string;
            createdAt: Date;
            updatedAt: Date;
            confidenceLevel?: undefined;
        })[];
        currentRiskMetrics: ({
            metricType: string;
            value: number;
            currency: string;
            asOfDate: any;
            calculationMethod: string;
            confidenceLevel: number;
            timeHorizon: string;
            additionalData?: undefined;
        } | {
            metricType: string;
            value: number;
            currency: string;
            asOfDate: any;
            calculationMethod: string;
            additionalData: {
                issuerConcentrations: {};
            };
            confidenceLevel?: undefined;
            timeHorizon?: undefined;
        } | {
            metricType: string;
            value: any;
            currency: string;
            asOfDate: any;
            calculationMethod: string;
            confidenceLevel?: undefined;
            timeHorizon?: undefined;
            additionalData?: undefined;
        })[];
        limitUtilizations: {
            id: string;
            limitId: any;
            limitName: any;
            limitType: any;
            limitValue: any;
            softLimitValue: any;
            currentValue: any;
            utilizationPercentage: number;
            softUtilizationPercentage: number;
            availableCapacity: number;
            timeToLimit: number;
            lastUpdated: Date;
            trend: string;
            isBreached: boolean;
            isSoftBreached: boolean;
            isWarning: boolean;
            daysToReview: number;
        }[];
        breaches: {
            id: string;
            limitId: any;
            limitName: any;
            limitType: any;
            breachType: string;
            severity: string;
            breachValue: any;
            limitValue: any;
            excessAmount: number;
            excessPercentage: number;
            breachDate: Date;
            timeInBreach: number;
            isEscalated: boolean;
            escalationLevel: string;
            requiresApproval: boolean;
            impactAssessment: string;
            recommendedActions: string[];
        }[];
        alerts: ({
            id: string;
            type: string;
            severity: any;
            limitId: any;
            limitName: any;
            message: string;
            description: string;
            currentValue: any;
            limitValue: any;
            excessAmount: any;
            isActive: boolean;
            requiresAction: boolean;
            createdAt: Date;
            acknowledgedAt: any;
            acknowledgedBy: any;
            resolvedAt: any;
            resolvedBy: any;
            utilizationPercentage?: undefined;
            availableCapacity?: undefined;
        } | {
            id: string;
            type: string;
            severity: string;
            limitId: any;
            limitName: any;
            message: string;
            description: string;
            currentValue: any;
            limitValue: any;
            utilizationPercentage: any;
            isActive: boolean;
            requiresAction: boolean;
            createdAt: Date;
            acknowledgedAt: any;
            acknowledgedBy: any;
            resolvedAt: any;
            resolvedBy: any;
            excessAmount?: undefined;
            availableCapacity?: undefined;
        } | {
            id: string;
            type: string;
            severity: string;
            limitId: any;
            limitName: any;
            message: string;
            description: string;
            currentValue: any;
            limitValue: any;
            availableCapacity: any;
            isActive: boolean;
            requiresAction: boolean;
            createdAt: Date;
            acknowledgedAt: any;
            acknowledgedBy: any;
            resolvedAt: any;
            resolvedBy: any;
            excessAmount?: undefined;
            utilizationPercentage?: undefined;
        })[];
        escalations: {
            id: string;
            breachId: any;
            limitId: any;
            limitName: any;
            escalationLevel: any;
            escalationDate: Date;
            escalatedTo: any;
            escalationReason: string;
            status: string;
            dueDate: Date;
            acknowledgedAt: any;
            acknowledgedBy: any;
            resolvedAt: any;
            resolvedBy: any;
            resolutionNotes: any;
        }[];
        approvals: {
            id: string;
            breachId: any;
            limitId: any;
            limitName: any;
            approvalType: string;
            requestedBy: string;
            requestDate: Date;
            requiredApprover: any;
            approvalReason: string;
            status: string;
            dueDate: Date;
            approvedAt: any;
            approvedBy: any;
            rejectedAt: any;
            rejectedBy: any;
            approvalNotes: any;
        }[];
        trends: {
            limitId: any;
            limitName: any;
            timeFrame: string;
            currentUtilization: number;
            averageUtilization: number;
            peakUtilization: number;
            minimumUtilization: number;
            trendDirection: string;
            volatility: number;
            breachFrequency: number;
            daysInBreach: number;
            forecastedUtilization: number;
            riskScore: number;
        }[];
        recommendations: {
            id: string;
            type: string;
            priority: string;
            limitId: any;
            limitName: any;
            title: string;
            description: string;
            actions: any;
            expectedImpact: string;
            implementationTimeframe: string;
            estimatedCost: number;
            riskReduction: any;
        }[];
        consolidatedLimits: {
            limitType: any;
            numberOfLimits: any;
            totalLimitValue: any;
            totalUtilization: any;
            utilizationPercentage: number;
            availableCapacity: number;
            numberOfBreaches: any;
            averageUtilization: number;
            maxUtilization: number;
            minUtilization: number;
        }[];
        calculationTime: number;
        createdAt: Date;
        assessedBy: any;
    }[]>;
    getPortfolioData(portfolioId: any, asOfDate: any): Promise<any>;
    getApplicableLimits(request: any): Promise<({
        id: string;
        name: string;
        type: string;
        scope: string;
        entityId: any;
        currency: string;
        limitValue: number;
        softLimitValue: number;
        warningThreshold: number;
        breachThreshold: number;
        escalationThreshold: number;
        measurementMethod: string;
        timeHorizon: string;
        confidenceLevel: number;
        isActive: boolean;
        effectiveDate: Date;
        expiryDate: Date;
        reviewFrequency: string;
        lastReviewDate: Date;
        nextReviewDate: Date;
        approvedBy: string;
        createdAt: Date;
        updatedAt: Date;
    } | {
        id: string;
        name: string;
        type: string;
        scope: string;
        entityId: any;
        currency: string;
        limitValue: number;
        softLimitValue: number;
        warningThreshold: number;
        breachThreshold: number;
        escalationThreshold: number;
        measurementMethod: string;
        timeHorizon: string;
        isActive: boolean;
        effectiveDate: Date;
        expiryDate: Date;
        reviewFrequency: string;
        lastReviewDate: Date;
        nextReviewDate: Date;
        approvedBy: string;
        createdAt: Date;
        updatedAt: Date;
        confidenceLevel?: undefined;
    })[]>;
    calculateCurrentRiskMetrics(portfolioData: any, request: any): Promise<({
        metricType: string;
        value: number;
        currency: string;
        asOfDate: any;
        calculationMethod: string;
        confidenceLevel: number;
        timeHorizon: string;
        additionalData?: undefined;
    } | {
        metricType: string;
        value: number;
        currency: string;
        asOfDate: any;
        calculationMethod: string;
        additionalData: {
            issuerConcentrations: {};
        };
        confidenceLevel?: undefined;
        timeHorizon?: undefined;
    } | {
        metricType: string;
        value: any;
        currency: string;
        asOfDate: any;
        calculationMethod: string;
        confidenceLevel?: undefined;
        timeHorizon?: undefined;
        additionalData?: undefined;
    })[]>;
    calculateLimitUtilizations(limits: any, metrics: any): Promise<{
        id: string;
        limitId: any;
        limitName: any;
        limitType: any;
        limitValue: any;
        softLimitValue: any;
        currentValue: any;
        utilizationPercentage: number;
        softUtilizationPercentage: number;
        availableCapacity: number;
        timeToLimit: number;
        lastUpdated: Date;
        trend: string;
        isBreached: boolean;
        isSoftBreached: boolean;
        isWarning: boolean;
        daysToReview: number;
    }[]>;
    identifyBreaches(utilizations: any): Promise<{
        id: string;
        limitId: any;
        limitName: any;
        limitType: any;
        breachType: string;
        severity: string;
        breachValue: any;
        limitValue: any;
        excessAmount: number;
        excessPercentage: number;
        breachDate: Date;
        timeInBreach: number;
        isEscalated: boolean;
        escalationLevel: string;
        requiresApproval: boolean;
        impactAssessment: string;
        recommendedActions: string[];
    }[]>;
    generateAlerts(breaches: any, utilizations: any): Promise<({
        id: string;
        type: string;
        severity: any;
        limitId: any;
        limitName: any;
        message: string;
        description: string;
        currentValue: any;
        limitValue: any;
        excessAmount: any;
        isActive: boolean;
        requiresAction: boolean;
        createdAt: Date;
        acknowledgedAt: any;
        acknowledgedBy: any;
        resolvedAt: any;
        resolvedBy: any;
        utilizationPercentage?: undefined;
        availableCapacity?: undefined;
    } | {
        id: string;
        type: string;
        severity: string;
        limitId: any;
        limitName: any;
        message: string;
        description: string;
        currentValue: any;
        limitValue: any;
        utilizationPercentage: any;
        isActive: boolean;
        requiresAction: boolean;
        createdAt: Date;
        acknowledgedAt: any;
        acknowledgedBy: any;
        resolvedAt: any;
        resolvedBy: any;
        excessAmount?: undefined;
        availableCapacity?: undefined;
    } | {
        id: string;
        type: string;
        severity: string;
        limitId: any;
        limitName: any;
        message: string;
        description: string;
        currentValue: any;
        limitValue: any;
        availableCapacity: any;
        isActive: boolean;
        requiresAction: boolean;
        createdAt: Date;
        acknowledgedAt: any;
        acknowledgedBy: any;
        resolvedAt: any;
        resolvedBy: any;
        excessAmount?: undefined;
        utilizationPercentage?: undefined;
    })[]>;
    processEscalations(breaches: any, request: any): Promise<{
        id: string;
        breachId: any;
        limitId: any;
        limitName: any;
        escalationLevel: any;
        escalationDate: Date;
        escalatedTo: any;
        escalationReason: string;
        status: string;
        dueDate: Date;
        acknowledgedAt: any;
        acknowledgedBy: any;
        resolvedAt: any;
        resolvedBy: any;
        resolutionNotes: any;
    }[]>;
    checkRequiredApprovals(utilizations: any, breaches: any): Promise<{
        id: string;
        breachId: any;
        limitId: any;
        limitName: any;
        approvalType: string;
        requestedBy: string;
        requestDate: Date;
        requiredApprover: any;
        approvalReason: string;
        status: string;
        dueDate: Date;
        approvedAt: any;
        approvedBy: any;
        rejectedAt: any;
        rejectedBy: any;
        approvalNotes: any;
    }[]>;
    analyzeLimitTrends(portfolioId: any, limits: any): Promise<{
        limitId: any;
        limitName: any;
        timeFrame: string;
        currentUtilization: number;
        averageUtilization: number;
        peakUtilization: number;
        minimumUtilization: number;
        trendDirection: string;
        volatility: number;
        breachFrequency: number;
        daysInBreach: number;
        forecastedUtilization: number;
        riskScore: number;
    }[]>;
    generateRecommendations(utilizations: any, breaches: any, trends: any): Promise<{
        id: string;
        type: string;
        priority: string;
        limitId: any;
        limitName: any;
        title: string;
        description: string;
        actions: any;
        expectedImpact: string;
        implementationTimeframe: string;
        estimatedCost: number;
        riskReduction: any;
    }[]>;
    calculateConsolidatedLimits(limits: any, utilizations: any): Promise<{
        limitType: any;
        numberOfLimits: any;
        totalLimitValue: any;
        totalUtilization: any;
        utilizationPercentage: number;
        availableCapacity: number;
        numberOfBreaches: any;
        averageUtilization: number;
        maxUtilization: number;
        minUtilization: number;
    }[]>;
    calculateIssuerConcentrations(positions: any): {};
    calculateCreditExposure(positions: any): any;
    calculateIlliquidPercentage(positions: any): number;
    calculateLeverage(portfolioData: any): number;
    isIlliquid(security: any): boolean;
    isMetricApplicableToLimit(metric: any, limit: any): any;
    calculateUtilizationValue(currentValue: any, limit: any): any;
    calculateTimeToLimit(currentValue: any, limit: any): number;
    calculateUtilizationTrend(limitId: any): Promise<string>;
    calculateDaysToReview(nextReviewDate: any): number;
    determineSeverity(utilization: any): "HIGH" | "MEDIUM" | "LOW" | "CRITICAL";
    calculateTimeInBreach(limitId: any): Promise<number>;
    determineEscalationLevel(severity: any, timeInBreach: any): "OPERATIONAL" | "EXECUTIVE" | "MANAGEMENT" | "SENIOR_MANAGEMENT";
    assessBreachImpact(utilization: any): Promise<string>;
    generateBreachActions(utilization: any, severity: any): string[];
    getEscalationRecipient(level: any): any;
    calculateEscalationDueDate(level: any): Date;
    getRequiredApprover(severity: any): any;
    calculateApprovalDueDate(severity: any): Date;
    estimateResolutionCost(breach: any): number;
    groupLimitsByType(limits: any): Map<any, any>;
    calculateOverallUtilization(utilizations: any): number;
    getAllPortfolios(entityId: any): Promise<{
        id: string;
        name: string;
    }[]>;
    generateConsolidatedReport(assessments: any, request: any): Promise<{
        id: string;
        entityId: any;
        tenantId: any;
        reportDate: Date;
        asOfDate: any;
        portfolioCount: any;
        totalLimitsMonitored: any;
        totalBreaches: any;
        totalCriticalBreaches: any;
        overallUtilizationPercentage: number;
        portfolioAssessments: any;
        executiveSummary: string;
        keyRisks: string[];
        recommendations: string[];
        createdAt: Date;
    }>;
    generateExecutiveSummary(assessments: any): string;
    identifyKeyRisks(assessments: any): string[];
    generateConsolidatedRecommendations(assessments: any): string[];
    sendImmediateAlert(breach: any, assessment: any): Promise<void>;
    storeAssessment(assessment: any): Promise<void>;
}
