export const __esModule: boolean;
export class CounterpartyExposureTrackingService {
    constructor(prisma: any, customLogger: any);
    prisma: any;
    logger: any;
    trackCounterpartyExposure(request: any): Promise<{
        id: string;
        portfolioId: any;
        counterpartyId: any;
        tenantId: any;
        assessmentDate: Date;
        asOfDate: any;
        counterpartyName: string;
        counterpartyRating: string;
        totalGrossExposure: any;
        totalNetExposure: any;
        totalCollateralValue: any;
        exposureAfterCollateral: number;
        currentExposures: {
            id: string;
            portfolioId: any;
            counterpartyId: any;
            securityId: any;
            positionId: any;
            exposureType: string;
            instrumentType: any;
            notionalAmount: any;
            marketValue: any;
            unrealizedPnL: any;
            currentExposure: number;
            replacementCost: number;
            currency: any;
            maturityDate: any;
            asOfDate: any;
            lastUpdated: Date;
            riskWeight: number;
            addOnFactor: any;
            creditConversionFactor: number;
        }[];
        potentialFutureExposures: {
            id: string;
            currentExposureId: any;
            counterpartyId: any;
            securityId: any;
            confidenceLevel: number;
            timeHorizon: string;
            potentialFutureExposure: number;
            expectedExposure: number;
            expectedPositiveExposure: number;
            maxPotentialExposure: number;
            simulationMethod: string;
            numberOfSimulations: number;
            volatility: number;
            timeToMaturity: number;
            calculationDate: Date;
        }[];
        collateralPositions: {
            id: string;
            counterpartyId: any;
            collateralType: string;
            currency: string;
            nominalAmount: number;
            marketValue: number;
            haircut: number;
            eligibilityStatus: string;
            concentrationLimit: number;
            utilisedAmount: number;
            availableAmount: number;
            lastValuationDate: any;
            substituionRights: boolean;
            rehypothecationRights: boolean;
        }[];
        netExposures: {
            id: string;
            counterpartyId: any;
            nettingSetId: any;
            grossPositiveExposure: any;
            grossNegativeExposure: any;
            netExposureBeforeCollateral: number;
            collateralValue: any;
            netExposureAfterCollateral: number;
            exposureType: string;
            currency: string;
            asOfDate: Date;
            componentExposures: any;
        }[];
        exposureAtDefault: {
            id: string;
            counterpartyId: any;
            nettingSetId: any;
            currentExposure: any;
            potentialFutureExposure: any;
            alphaFactor: number;
            exposureAtDefault: any;
            effectiveMaturity: number;
            calculationMethod: string;
            calculationDate: Date;
        }[];
        creditEquivalentAmounts: {
            id: string;
            counterpartyId: any;
            nettingSetId: any;
            replacementCost: number;
            addOnAmount: number;
            creditEquivalentAmount: any;
            riskWeight: number;
            riskWeightedAmount: number;
            calculationMethod: string;
            calculationDate: Date;
        }[];
        marginCalls: {
            id: string;
            counterpartyId: any;
            agreementId: any;
            callDate: Date;
            dueDate: Date;
            callAmount: number;
            currency: any;
            callType: string;
            status: string;
            totalExposure: any;
            thresholdAmount: any;
            currentCollateral: number;
            requiredCollateral: number;
        }[];
        settlementRisks: {
            id: string;
            counterpartyId: any;
            exposureId: any;
            securityId: any;
            settlementDate: any;
            settlementAmount: any;
            currency: any;
            riskType: string;
            riskAmount: any;
            timeZoneRisk: number;
            paymentSystemRisk: string;
            mitigants: any[];
        }[];
        masterAgreements: {
            id: string;
            counterpartyId: any;
            agreementType: string;
            effectiveDate: Date;
            terminationDate: any;
            governingLaw: string;
            closeOutNetting: boolean;
            setOffRights: boolean;
            collateralRights: boolean;
            additionalTerminations: any[];
            creditEvents: string[];
            thresholdAmount: number;
            minimumTransferAmount: number;
            rounding: number;
        }[];
        nettingAgreements: {
            id: string;
            counterpartyId: any;
            agreementType: string;
            effectiveDate: Date;
            includedTransactionTypes: string[];
            nettingMethod: string;
            crossDefaultProvisions: boolean;
            crossAccelerationProvisions: boolean;
            setOffRights: boolean;
            walkAwayClause: boolean;
        }[];
        collateralAgreements: {
            id: string;
            counterpartyId: any;
            agreementType: string;
            effectiveDate: Date;
            baseCurrency: string;
            thresholdAmount: number;
            minimumTransferAmount: number;
            independentAmount: number;
            rounding: number;
            marginCallFrequency: string;
            eligibleCollateral: {
                assetType: string;
                currency: string;
                haircut: number;
                concentrationLimit: number;
            }[];
            substitutionRights: boolean;
            rehypothecationRights: boolean;
        }[];
        exposureMetrics: {
            totalGrossExposure: any;
            totalNetExposure: any;
            totalExposureAtDefault: any;
            nettingBenefit: number;
            nettingRatio: number;
            averageMaturity: number;
            exposureVolatility: number;
            peakExposure: number;
            numberOfNettingSets: any;
            concentrationIndex: any;
        };
        concentrationAnalysis: {
            counterpartyId: any;
            totalExposure: any;
            largestExposureAmount: number;
            largestExposurePercentage: number;
            top5ExposuresAmount: any;
            top5ExposuresPercentage: number;
            herfindahlIndex: any;
            diversificationRatio: number;
            concentrationRiskLevel: string;
        };
        trends: {
            counterpartyId: any;
            metricType: string;
            currentValue: any;
            previousValue: number;
            changeAmount: number;
            changePercentage: number;
            trendDirection: string;
            timeFrame: string;
            volatility: number;
            averageValue: number;
            peakValue: number;
            troughValue: number;
        }[];
        alerts: {
            id: string;
            counterpartyId: any;
            alertType: string;
            severity: string;
            message: string;
            description: string;
            currentValue: any;
            limitValue: number;
            breachAmount: number;
            breachPercentage: number;
            recommendedAction: string;
            createdAt: Date;
            status: string;
        }[];
        recommendations: {
            id: string;
            type: string;
            priority: string;
            title: string;
            description: string;
            actions: string[];
            expectedImpact: string;
            implementationTimeframe: string;
            estimatedCost: number;
            riskReduction: number;
        }[];
        calculationTime: number;
        createdAt: Date;
        assessedBy: any;
    }>;
    trackAllCounterpartyExposures(request: any): Promise<{
        id: string;
        portfolioId: any;
        counterpartyId: any;
        tenantId: any;
        assessmentDate: Date;
        asOfDate: any;
        counterpartyName: string;
        counterpartyRating: string;
        totalGrossExposure: any;
        totalNetExposure: any;
        totalCollateralValue: any;
        exposureAfterCollateral: number;
        currentExposures: {
            id: string;
            portfolioId: any;
            counterpartyId: any;
            securityId: any;
            positionId: any;
            exposureType: string;
            instrumentType: any;
            notionalAmount: any;
            marketValue: any;
            unrealizedPnL: any;
            currentExposure: number;
            replacementCost: number;
            currency: any;
            maturityDate: any;
            asOfDate: any;
            lastUpdated: Date;
            riskWeight: number;
            addOnFactor: any;
            creditConversionFactor: number;
        }[];
        potentialFutureExposures: {
            id: string;
            currentExposureId: any;
            counterpartyId: any;
            securityId: any;
            confidenceLevel: number;
            timeHorizon: string;
            potentialFutureExposure: number;
            expectedExposure: number;
            expectedPositiveExposure: number;
            maxPotentialExposure: number;
            simulationMethod: string;
            numberOfSimulations: number;
            volatility: number;
            timeToMaturity: number;
            calculationDate: Date;
        }[];
        collateralPositions: {
            id: string;
            counterpartyId: any;
            collateralType: string;
            currency: string;
            nominalAmount: number;
            marketValue: number;
            haircut: number;
            eligibilityStatus: string;
            concentrationLimit: number;
            utilisedAmount: number;
            availableAmount: number;
            lastValuationDate: any;
            substituionRights: boolean;
            rehypothecationRights: boolean;
        }[];
        netExposures: {
            id: string;
            counterpartyId: any;
            nettingSetId: any;
            grossPositiveExposure: any;
            grossNegativeExposure: any;
            netExposureBeforeCollateral: number;
            collateralValue: any;
            netExposureAfterCollateral: number;
            exposureType: string;
            currency: string;
            asOfDate: Date;
            componentExposures: any;
        }[];
        exposureAtDefault: {
            id: string;
            counterpartyId: any;
            nettingSetId: any;
            currentExposure: any;
            potentialFutureExposure: any;
            alphaFactor: number;
            exposureAtDefault: any;
            effectiveMaturity: number;
            calculationMethod: string;
            calculationDate: Date;
        }[];
        creditEquivalentAmounts: {
            id: string;
            counterpartyId: any;
            nettingSetId: any;
            replacementCost: number;
            addOnAmount: number;
            creditEquivalentAmount: any;
            riskWeight: number;
            riskWeightedAmount: number;
            calculationMethod: string;
            calculationDate: Date;
        }[];
        marginCalls: {
            id: string;
            counterpartyId: any;
            agreementId: any;
            callDate: Date;
            dueDate: Date;
            callAmount: number;
            currency: any;
            callType: string;
            status: string;
            totalExposure: any;
            thresholdAmount: any;
            currentCollateral: number;
            requiredCollateral: number;
        }[];
        settlementRisks: {
            id: string;
            counterpartyId: any;
            exposureId: any;
            securityId: any;
            settlementDate: any;
            settlementAmount: any;
            currency: any;
            riskType: string;
            riskAmount: any;
            timeZoneRisk: number;
            paymentSystemRisk: string;
            mitigants: any[];
        }[];
        masterAgreements: {
            id: string;
            counterpartyId: any;
            agreementType: string;
            effectiveDate: Date;
            terminationDate: any;
            governingLaw: string;
            closeOutNetting: boolean;
            setOffRights: boolean;
            collateralRights: boolean;
            additionalTerminations: any[];
            creditEvents: string[];
            thresholdAmount: number;
            minimumTransferAmount: number;
            rounding: number;
        }[];
        nettingAgreements: {
            id: string;
            counterpartyId: any;
            agreementType: string;
            effectiveDate: Date;
            includedTransactionTypes: string[];
            nettingMethod: string;
            crossDefaultProvisions: boolean;
            crossAccelerationProvisions: boolean;
            setOffRights: boolean;
            walkAwayClause: boolean;
        }[];
        collateralAgreements: {
            id: string;
            counterpartyId: any;
            agreementType: string;
            effectiveDate: Date;
            baseCurrency: string;
            thresholdAmount: number;
            minimumTransferAmount: number;
            independentAmount: number;
            rounding: number;
            marginCallFrequency: string;
            eligibleCollateral: {
                assetType: string;
                currency: string;
                haircut: number;
                concentrationLimit: number;
            }[];
            substitutionRights: boolean;
            rehypothecationRights: boolean;
        }[];
        exposureMetrics: {
            totalGrossExposure: any;
            totalNetExposure: any;
            totalExposureAtDefault: any;
            nettingBenefit: number;
            nettingRatio: number;
            averageMaturity: number;
            exposureVolatility: number;
            peakExposure: number;
            numberOfNettingSets: any;
            concentrationIndex: any;
        };
        concentrationAnalysis: {
            counterpartyId: any;
            totalExposure: any;
            largestExposureAmount: number;
            largestExposurePercentage: number;
            top5ExposuresAmount: any;
            top5ExposuresPercentage: number;
            herfindahlIndex: any;
            diversificationRatio: number;
            concentrationRiskLevel: string;
        };
        trends: {
            counterpartyId: any;
            metricType: string;
            currentValue: any;
            previousValue: number;
            changeAmount: number;
            changePercentage: number;
            trendDirection: string;
            timeFrame: string;
            volatility: number;
            averageValue: number;
            peakValue: number;
            troughValue: number;
        }[];
        alerts: {
            id: string;
            counterpartyId: any;
            alertType: string;
            severity: string;
            message: string;
            description: string;
            currentValue: any;
            limitValue: number;
            breachAmount: number;
            breachPercentage: number;
            recommendedAction: string;
            createdAt: Date;
            status: string;
        }[];
        recommendations: {
            id: string;
            type: string;
            priority: string;
            title: string;
            description: string;
            actions: string[];
            expectedImpact: string;
            implementationTimeframe: string;
            estimatedCost: number;
            riskReduction: number;
        }[];
        calculationTime: number;
        createdAt: Date;
        assessedBy: any;
    }[]>;
    getPortfolioData(portfolioId: any, asOfDate: any): Promise<any>;
    getCounterpartyData(counterpartyId: any): Promise<{
        id: any;
        name: string;
        rating: string;
        sector: string;
        country: string;
        parentCompany: any;
        subsidiaries: any[];
    }>;
    getMasterAgreements(counterpartyId: any): Promise<{
        id: string;
        counterpartyId: any;
        agreementType: string;
        effectiveDate: Date;
        terminationDate: any;
        governingLaw: string;
        closeOutNetting: boolean;
        setOffRights: boolean;
        collateralRights: boolean;
        additionalTerminations: any[];
        creditEvents: string[];
        thresholdAmount: number;
        minimumTransferAmount: number;
        rounding: number;
    }[]>;
    getNettingAgreements(counterpartyId: any): Promise<{
        id: string;
        counterpartyId: any;
        agreementType: string;
        effectiveDate: Date;
        includedTransactionTypes: string[];
        nettingMethod: string;
        crossDefaultProvisions: boolean;
        crossAccelerationProvisions: boolean;
        setOffRights: boolean;
        walkAwayClause: boolean;
    }[]>;
    getCollateralAgreements(counterpartyId: any): Promise<{
        id: string;
        counterpartyId: any;
        agreementType: string;
        effectiveDate: Date;
        baseCurrency: string;
        thresholdAmount: number;
        minimumTransferAmount: number;
        independentAmount: number;
        rounding: number;
        marginCallFrequency: string;
        eligibleCollateral: {
            assetType: string;
            currency: string;
            haircut: number;
            concentrationLimit: number;
        }[];
        substitutionRights: boolean;
        rehypothecationRights: boolean;
    }[]>;
    calculateCurrentExposures(portfolioData: any, counterpartyData: any, request: any): Promise<{
        id: string;
        portfolioId: any;
        counterpartyId: any;
        securityId: any;
        positionId: any;
        exposureType: string;
        instrumentType: any;
        notionalAmount: any;
        marketValue: any;
        unrealizedPnL: any;
        currentExposure: number;
        replacementCost: number;
        currency: any;
        maturityDate: any;
        asOfDate: any;
        lastUpdated: Date;
        riskWeight: number;
        addOnFactor: any;
        creditConversionFactor: number;
    }[]>;
    calculatePotentialFutureExposures(currentExposures: any, request: any): Promise<{
        id: string;
        currentExposureId: any;
        counterpartyId: any;
        securityId: any;
        confidenceLevel: number;
        timeHorizon: string;
        potentialFutureExposure: number;
        expectedExposure: number;
        expectedPositiveExposure: number;
        maxPotentialExposure: number;
        simulationMethod: string;
        numberOfSimulations: number;
        volatility: number;
        timeToMaturity: number;
        calculationDate: Date;
    }[]>;
    calculatePFE(currentExposure: any, request: any): Promise<{
        id: string;
        currentExposureId: any;
        counterpartyId: any;
        securityId: any;
        confidenceLevel: number;
        timeHorizon: string;
        potentialFutureExposure: number;
        expectedExposure: number;
        expectedPositiveExposure: number;
        maxPotentialExposure: number;
        simulationMethod: string;
        numberOfSimulations: number;
        volatility: number;
        timeToMaturity: number;
        calculationDate: Date;
    }>;
    assessCollateralPositions(counterpartyId: any, asOfDate: any): Promise<{
        id: string;
        counterpartyId: any;
        collateralType: string;
        currency: string;
        nominalAmount: number;
        marketValue: number;
        haircut: number;
        eligibilityStatus: string;
        concentrationLimit: number;
        utilisedAmount: number;
        availableAmount: number;
        lastValuationDate: any;
        substituionRights: boolean;
        rehypothecationRights: boolean;
    }[]>;
    calculateNetExposures(currentExposures: any, collateralPositions: any, nettingAgreements: any): Promise<{
        id: string;
        counterpartyId: any;
        nettingSetId: any;
        grossPositiveExposure: any;
        grossNegativeExposure: any;
        netExposureBeforeCollateral: number;
        collateralValue: any;
        netExposureAfterCollateral: number;
        exposureType: string;
        currency: string;
        asOfDate: Date;
        componentExposures: any;
    }[]>;
    calculateExposureAtDefault(netExposures: any, potentialFutureExposures: any): Promise<{
        id: string;
        counterpartyId: any;
        nettingSetId: any;
        currentExposure: any;
        potentialFutureExposure: any;
        alphaFactor: number;
        exposureAtDefault: any;
        effectiveMaturity: number;
        calculationMethod: string;
        calculationDate: Date;
    }[]>;
    calculateCreditEquivalentAmounts(netExposures: any, request: any): Promise<{
        id: string;
        counterpartyId: any;
        nettingSetId: any;
        replacementCost: number;
        addOnAmount: number;
        creditEquivalentAmount: any;
        riskWeight: number;
        riskWeightedAmount: number;
        calculationMethod: string;
        calculationDate: Date;
    }[]>;
    assessMarginRequirements(netExposures: any, collateralAgreements: any): Promise<{
        id: string;
        counterpartyId: any;
        agreementId: any;
        callDate: Date;
        dueDate: Date;
        callAmount: number;
        currency: any;
        callType: string;
        status: string;
        totalExposure: any;
        thresholdAmount: any;
        currentCollateral: number;
        requiredCollateral: number;
    }[]>;
    assessSettlementRisks(currentExposures: any, request: any): Promise<{
        id: string;
        counterpartyId: any;
        exposureId: any;
        securityId: any;
        settlementDate: any;
        settlementAmount: any;
        currency: any;
        riskType: string;
        riskAmount: any;
        timeZoneRisk: number;
        paymentSystemRisk: string;
        mitigants: any[];
    }[]>;
    calculateExposureMetrics(netExposures: any, exposureAtDefault: any): Promise<{
        totalGrossExposure: any;
        totalNetExposure: any;
        totalExposureAtDefault: any;
        nettingBenefit: number;
        nettingRatio: number;
        averageMaturity: number;
        exposureVolatility: number;
        peakExposure: number;
        numberOfNettingSets: any;
        concentrationIndex: any;
    }>;
    analyzeExposureConcentration(netExposures: any, request: any): Promise<{
        counterpartyId: any;
        totalExposure: any;
        largestExposureAmount: number;
        largestExposurePercentage: number;
        top5ExposuresAmount: any;
        top5ExposuresPercentage: number;
        herfindahlIndex: any;
        diversificationRatio: number;
        concentrationRiskLevel: string;
    }>;
    analyzExposureTrends(counterpartyId: any, currentExposures: any): Promise<{
        counterpartyId: any;
        metricType: string;
        currentValue: any;
        previousValue: number;
        changeAmount: number;
        changePercentage: number;
        trendDirection: string;
        timeFrame: string;
        volatility: number;
        averageValue: number;
        peakValue: number;
        troughValue: number;
    }[]>;
    generateExposureAlerts(metrics: any, netExposures: any, request: any): Promise<{
        id: string;
        counterpartyId: any;
        alertType: string;
        severity: string;
        message: string;
        description: string;
        currentValue: any;
        limitValue: number;
        breachAmount: number;
        breachPercentage: number;
        recommendedAction: string;
        createdAt: Date;
        status: string;
    }[]>;
    generateRecommendations(metrics: any, alerts: any, netExposures: any): Promise<{
        id: string;
        type: string;
        priority: string;
        title: string;
        description: string;
        actions: string[];
        expectedImpact: string;
        implementationTimeframe: string;
        estimatedCost: number;
        riskReduction: number;
    }[]>;
    isCounterpartyExposure(position: any, counterpartyId: any): boolean;
    determineExposureType(security: any): "FIXED_INCOME" | "OTHER" | "DERIVATIVE" | "SECURITIES_FINANCING";
    calculateNotionalAmount(position: any): any;
    getMaturityDate(security: any): any;
    calculateRiskWeight(security: any): 0 | 1;
    calculateAddOnFactor(security: any): any;
    getCreditConversionFactor(security: any): 1 | 0.5;
    getRiskCategory(security: any): "OTHER" | "EQUITY" | "INTEREST_RATE" | "FX";
    getAssetVolatility(securityId: any): Promise<number>;
    getTimeToMaturity(maturityDate: any): number;
    simulatePFE(exposure: any, volatility: any, timeToMaturity: any, confidenceLevel: any): number;
    getZScore(confidenceLevel: any): any;
    groupExposuresByNettingSet(exposures: any, nettingAgreements: any): Map<any, any>;
    determineNettingSet(exposure: any, nettingAgreements: any): any;
    getApplicableCollateral(collateralPositions: any, nettingSetId: any): any;
    calculateEffectiveMaturity(pfeExposures: any): number;
    getCounterpartyRiskWeight(counterpartyId: any): Promise<number>;
    isSettlingToday(exposure: any, asOfDate: any): boolean;
    calculateTimeZoneRisk(exposure: any): number;
    assessPaymentSystemRisk(exposure: any): string;
    identifySettlementMitigants(exposure: any): any[];
    calculateAverageMaturity(exposureAtDefault: any): number;
    calculateExposureVolatility(netExposures: any): Promise<number>;
    calculateConcentrationIndex(netExposures: any): any;
    calculateHerfindahlIndex(netExposures: any): any;
    calculateDiversificationRatio(netExposures: any): number;
    assessConcentrationRiskLevel(largestExposure: any, totalExposure: any): "HIGH" | "MEDIUM" | "LOW";
    getExposureLimit(counterpartyId: any): Promise<{
        id: string;
        counterpartyId: any;
        limitType: string;
        limitAmount: number;
        currency: string;
        utilizationAmount: number;
        availableAmount: number;
        utilizationPercentage: number;
        effectiveDate: Date;
        expiryDate: Date;
        approvedBy: string;
        lastReviewDate: Date;
        nextReviewDate: Date;
    }>;
    calculateTotalGrossExposure(currentExposures: any): any;
    calculateTotalNetExposure(netExposures: any): any;
    calculateTotalCollateralValue(collateralPositions: any): any;
    calculateExposureAfterCollateral(netExposures: any, collateralPositions: any): number;
    getAllCounterparties(portfolioId: any): Promise<{
        id: string;
        name: string;
    }[]>;
    analyzePortfolioCounterpartyConcentration(assessments: any): Promise<{
        totalExposure: any;
        largestExposure: number;
        concentrationRatio: number;
        numberOfCounterparties: any;
    }>;
    storeAssessment(assessment: any): Promise<void>;
}
