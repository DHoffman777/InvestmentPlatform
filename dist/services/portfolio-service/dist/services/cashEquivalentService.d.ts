export const __esModule: boolean;
export class CashEquivalentService {
    constructor(prisma: any);
    prisma: any;
    kafkaService: kafka_mock_1.KafkaService;
    createMoneyMarketPosition(request: any): Promise<{
        id: any;
        portfolioId: any;
        tenantId: any;
        assetType: string;
        assetId: any;
        symbol: any;
        shares: any;
        marketValue: any;
        currentYield: any;
        costBasis: any;
        liquidityTier: string;
        isActive: boolean;
        isPledged: boolean;
        createdAt: Date;
        updatedAt: Date;
        lastPriceUpdate: Date;
    }>;
    createSweepAccount(request: any): Promise<{
        id: any;
        portfolioId: any;
        tenantId: any;
        assetType: string;
        assetId: any;
        symbol: string;
        balance: any;
        marketValue: any;
        currentYield: any;
        costBasis: any;
        liquidityTier: string;
        isActive: boolean;
        isPledged: boolean;
        createdAt: Date;
        updatedAt: Date;
        lastPriceUpdate: Date;
    }>;
    executeSweep(request: any): Promise<{
        id: any;
        portfolioId: any;
        positionId: any;
        tenantId: any;
        transactionType: string;
        amount: number;
        price: number;
        tradeDate: Date;
        settlementDate: Date;
        sweepType: any;
        triggerEvent: any;
        status: string;
        createdAt: Date;
        processedAt: Date;
        createdBy: any;
    }>;
    processYieldDistribution(request: any): Promise<{
        id: any;
        portfolioId: any;
        positionId: any;
        tenantId: any;
        transactionType: string;
        amount: any;
        tradeDate: any;
        settlementDate: any;
        interestRate: any;
        status: string;
        createdAt: Date;
        processedAt: Date;
        createdBy: any;
    }>;
    calculateCurrentYield(positionId: any, tenantId: any): Promise<{
        positionId: any;
        calculationDate: Date;
        currentYield: number;
        effectiveYield: number;
        compoundYield: number;
        dividendYield: number;
        interestYield: number;
        feeAdjustedYield: number;
        periodDays: number;
        annualizationFactor: number;
        calculationMethod: string;
        createdAt: Date;
    }>;
    getCashEquivalentPositions(portfolioId: any, tenantId: any): Promise<any>;
    updatePortfolioValuation(portfolioId: any, amount: any, operation: any): Promise<void>;
    publishEvent(eventType: any, data: any): Promise<void>;
}
import kafka_mock_1 = require("../utils/kafka-mock");
