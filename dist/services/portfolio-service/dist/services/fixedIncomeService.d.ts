export const __esModule: boolean;
export class FixedIncomeService {
    constructor(prisma: any, kafkaService: any);
    prisma: any;
    kafkaService: any;
    getFixedIncomePositions(portfolioId: any, tenantId: any): Promise<any>;
    createFixedIncomePosition(request: any): Promise<{
        id: any;
        portfolioId: any;
        tenantId: any;
        assetType: any;
        assetId: any;
        cusip: any;
        symbol: any;
        faceValue: any;
        quantity: any;
        marketValue: any;
        costBasis: any;
        accruedInterest: any;
        currentYield: number;
        yieldToMaturity: number;
        duration: number;
        modifiedDuration: number;
        convexity: number;
        purchaseDate: any;
        maturityDate: Date;
        taxLots: any[];
        isActive: any;
        isPledged: boolean;
        createdAt: any;
        updatedAt: any;
        lastPriceUpdate: any;
    }>;
    createFixedIncomeTransaction(request: any): Promise<{
        id: any;
        portfolioId: any;
        tenantId: any;
        transactionType: any;
        cusip: any;
        symbol: any;
        assetType: any;
        quantity: any;
        price: any;
        faceValue: any;
        accruedInterest: any;
        netAmount: any;
        commission: any;
        fees: any;
        markupMarkdown: number;
        tradeDate: any;
        settlementDate: any;
        yieldAtTrade: number;
        status: any;
        createdAt: any;
        updatedAt: any;
        createdBy: any;
    }>;
    processCouponPayment(request: any): Promise<{
        id: `${string}-${string}-${string}-${string}-${string}`;
        positionId: any;
        tenantId: any;
        paymentDate: Date;
        recordDate: Date;
        exDate: Date;
        couponRate: any;
        paymentAmount: number;
        faceValueHeld: number;
        taxableAmount: number;
        taxExemptAmount: number;
        status: string;
        createdAt: Date;
        processedAt: Date;
    }>;
    calculateYieldMetrics(positionId: any, tenantId: any): Promise<{
        currentYield: number;
        yieldToMaturity: number;
        yieldToWorst: number;
        duration: number;
        modifiedDuration: number;
        convexity: number;
        calculationDate: Date;
    }>;
    valuatePosition(request: any): Promise<{
        positionId: any;
        valuationDate: Date;
        currentPrice: any;
        marketValue: any;
        accruedInterest: number;
        totalValue: any;
        yieldMetrics: {
            currentYield: number;
            yieldToMaturity: number;
            yieldToWorst: number;
            duration: number;
            modifiedDuration: number;
            convexity: number;
            calculationDate: Date;
        };
        riskMetrics: {
            duration: number;
            modifiedDuration: number;
            convexity: number;
            priceVolatility: number;
        };
    }>;
    mapToFixedIncomePosition(position: any): {
        id: any;
        portfolioId: any;
        tenantId: any;
        assetType: any;
        assetId: any;
        cusip: any;
        symbol: any;
        faceValue: any;
        quantity: any;
        marketValue: any;
        costBasis: any;
        accruedInterest: any;
        currentYield: number;
        yieldToMaturity: number;
        duration: number;
        modifiedDuration: number;
        convexity: number;
        purchaseDate: any;
        maturityDate: Date;
        taxLots: any[];
        isActive: any;
        isPledged: boolean;
        createdAt: any;
        updatedAt: any;
        lastPriceUpdate: any;
    };
    mapToFixedIncomeTransaction(transaction: any): {
        id: any;
        portfolioId: any;
        tenantId: any;
        transactionType: any;
        cusip: any;
        symbol: any;
        assetType: any;
        quantity: any;
        price: any;
        faceValue: any;
        accruedInterest: any;
        netAmount: any;
        commission: any;
        fees: any;
        markupMarkdown: number;
        tradeDate: any;
        settlementDate: any;
        yieldAtTrade: number;
        status: any;
        createdAt: any;
        updatedAt: any;
        createdBy: any;
    };
    calculateAccruedInterest(faceValue: any, couponRate: any, settlementDate: any, lastCouponDate: any): number;
    approximateYTM(price: any, faceValue: any, couponRate: any, yearsToMaturity: any): number;
    calculateDuration(price: any, faceValue: any, couponRate: any, yearsToMaturity: any): number;
    calculateConvexity(price: any, faceValue: any, couponRate: any, yearsToMaturity: any): number;
    updatePositionFromTransaction(transaction: any): Promise<void>;
}
