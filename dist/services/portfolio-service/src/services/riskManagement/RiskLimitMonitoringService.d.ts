import { PrismaClient } from '@prisma/client';
import { KafkaProducer } from '../../utils/kafka/producer';
import { Logger } from '../../utils/logger';
import { RiskLimitAssessment, RiskLimitRequest } from '../../models/riskManagement/RiskManagement';
export declare class RiskLimitMonitoringService {
    private prisma;
    private kafkaProducer;
    private logger;
    constructor(prisma: PrismaClient, kafkaProducer: KafkaProducer, logger: Logger);
    monitorRiskLimits(request: RiskLimitRequest): Promise<RiskLimitAssessment>;
    monitorAllPortfolioLimits(request: Omit<RiskLimitRequest, 'portfolioId'>): Promise<RiskLimitAssessment[]>;
    private getPortfolioData;
    private getApplicableLimits;
    private calculateCurrentRiskMetrics;
    private calculateLimitUtilizations;
    private identifyBreaches;
    private generateAlerts;
    private processEscalations;
    private checkRequiredApprovals;
    private analyzeLimitTrends;
    private generateRecommendations;
    private calculateConsolidatedLimits;
    private calculateIssuerConcentrations;
    private calculateCreditExposure;
    private calculateIlliquidPercentage;
    private calculateLeverage;
    private isIlliquid;
    private isMetricApplicableToLimit;
    private calculateUtilizationValue;
    private calculateTimeToLimit;
    private calculateUtilizationTrend;
    private calculateDaysToReview;
    private determineSeverity;
    private calculateTimeInBreach;
    private determineEscalationLevel;
    private assessBreachImpact;
    private generateBreachActions;
    private getEscalationRecipient;
    private calculateEscalationDueDate;
    private getRequiredApprover;
    private calculateApprovalDueDate;
    private estimateResolutionCost;
    private groupLimitsByType;
    private calculateOverallUtilization;
    private getAllPortfolios;
    private generateConsolidatedReport;
    private generateExecutiveSummary;
    private identifyKeyRisks;
    private generateConsolidatedRecommendations;
    private sendImmediateAlert;
    private storeAssessment;
}
