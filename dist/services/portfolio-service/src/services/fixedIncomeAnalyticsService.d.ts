import { PrismaClient } from '@prisma/client';
import { YieldCalculationRequest, YieldCalculationResult, DurationConvexityRequest, DurationConvexityResult, CreditAnalysisRequest, CreditAnalysisResult, FixedIncomePortfolioAnalytics } from '../models/fixedIncome/FixedIncomeAnalytics';
export declare class FixedIncomeAnalyticsService {
    private prisma;
    private kafkaService;
    constructor(prisma: PrismaClient, kafkaService: any);
    calculateYields(request: YieldCalculationRequest, tenantId: string, userId: string): Promise<YieldCalculationResult>;
    calculateDurationConvexity(request: DurationConvexityRequest, tenantId: string, userId: string): Promise<DurationConvexityResult>;
    performCreditAnalysis(request: CreditAnalysisRequest, tenantId: string, userId: string): Promise<CreditAnalysisResult>;
    calculatePortfolioAnalytics(portfolioId: string, tenantId: string, userId: string): Promise<FixedIncomePortfolioAnalytics>;
    private calculateYieldToMaturity;
    private calculateYieldToWorst;
    private calculateYieldToCall;
    private calculateCurrentYield;
    private calculateTaxEquivalentYield;
    private calculateOptionAdjustedYield;
    private calculateDurationMetrics;
    private calculateModifiedDuration;
    private calculateMacaulayDuration;
    private calculateEffectiveDuration;
    private calculateOptionAdjustedDuration;
    private calculateConvexityMetrics;
    private calculateConvexity;
    private calculateEffectiveConvexity;
    private calculateGamma;
    private calculateCreditMetrics;
    private calculatePresentValue;
    private generateCashFlows;
    private getPaymentFrequency;
    private calculatePeriods;
    private getNextPaymentDate;
    private calculateNumericalDuration;
    private calculateYieldToDate;
    private calculatePresentValueToDate;
    private calculateDurationToDate;
    private calculateDV01;
    private calculatePV01;
    private getFixedIncomeSecurity;
    private getFixedIncomePositions;
    private calculatePortfolioYield;
    private calculatePortfolioDuration;
    private calculatePortfolioConvexity;
    private calculatePortfolioSpread;
    private calculateSectorAllocation;
    private calculateRatingAllocation;
    private calculateMaturityDistribution;
    private projectCashFlows;
    private performStressTesting;
    private calculateInterestRateVaR;
    private getCreditSpread;
    private calculateDefaultProbability;
    private calculateUnexpectedLoss;
    private calculateHazardRate;
    private estimateDefaultProbability;
    private calculateAverageRating;
    private calculateEmbeddedOptionValue;
    private savePortfolioAnalytics;
}
