import { PrismaClient } from '@prisma/client';
import { KafkaService } from '../../utils/kafka-mock';
import { CustodianConnectionRequest, CustodianConnectionResponse, DataFeedRequest, DataFeedResponse, ReconciliationRequest, ReconciliationResponse, OrderSubmissionRequest, OrderSubmissionResponse, DocumentRetrievalRequest, DocumentRetrievalResponse } from '../../models/custodianIntegration/CustodianIntegration';
export declare class CustodianIntegrationService {
    private prisma;
    private kafkaService;
    private integrationServices;
    private performanceMetrics;
    private activeConnections;
    constructor(prisma: PrismaClient, kafkaService: KafkaService);
    private initializeIntegrationServices;
    createCustodianConnection(tenantId: string, request: CustodianConnectionRequest, userId: string): Promise<CustodianConnectionResponse>;
    processCustodianDataFeed(connectionId: string, request: DataFeedRequest): Promise<DataFeedResponse>;
    performReconciliation(connectionId: string, request: ReconciliationRequest): Promise<ReconciliationResponse>;
    submitOrders(connectionId: string, request: OrderSubmissionRequest): Promise<OrderSubmissionResponse>;
    retrieveDocuments(connectionId: string, request: DocumentRetrievalRequest): Promise<DocumentRetrievalResponse>;
    monitorConnections(): Promise<any>;
    private validateConnectionConfig;
    private testConnection;
    private getIntegrationService;
    private getCustodianConnection;
    private processAndValidateData;
    private validateRecord;
    private performDataReconciliation;
    private generateReconciliationSummary;
    private createReconciliationAlerts;
    private performHealthCheck;
    private updateConnectionStatus;
    private updatePerformanceMetrics;
    private collectPerformanceMetrics;
    private checkForAlerts;
    private handleConnectionError;
    private initializePerformanceMonitoring;
    private saveCustodianConnection;
    private loadCustodianConnection;
    private updateCustodianConnection;
    private storeProcessedData;
    private storeReconciliationResults;
    private storeOrderSubmissions;
    private storeDocumentRetrievals;
    private storeAlert;
    private getCustodianData;
    private getPortfolioData;
    private validateOrders;
    private updateOrderStatuses;
    private processDocuments;
}
