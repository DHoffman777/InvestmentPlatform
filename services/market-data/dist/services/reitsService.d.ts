import { PrismaClient, Security } from '@prisma/client';
import { Prisma } from '@prisma/client';
export interface REITData {
    symbol: string;
    name: string;
    cusip?: string;
    isin?: string;
    securityType: 'REIT';
    exchange: string;
    currency?: string;
    country?: string;
    reitType: 'EQUITY_REIT' | 'MORTGAGE_REIT' | 'HYBRID_REIT';
    propertyTypes: string[];
    marketCap: Prisma.Decimal;
    dividendYield?: Prisma.Decimal;
    distributionFrequency?: 'MONTHLY' | 'QUARTERLY' | 'SEMI_ANNUAL' | 'ANNUAL';
    fundsFromOperations?: Prisma.Decimal;
    adjustedFFO?: Prisma.Decimal;
    netAssetValue?: Prisma.Decimal;
    priceToFFO?: Prisma.Decimal;
    debtToEquityRatio?: Prisma.Decimal;
    occupancyRate?: Prisma.Decimal;
    geographicFocus?: 'DOMESTIC' | 'INTERNATIONAL' | 'GLOBAL';
    primaryMarkets?: string[];
    managementCompany?: string;
    portfolioManager?: string;
    totalProperties?: number;
    totalSquareFootage?: Prisma.Decimal;
    totalReturn1Y?: Prisma.Decimal;
    totalReturn3Y?: Prisma.Decimal;
    totalReturn5Y?: Prisma.Decimal;
    beta?: Prisma.Decimal;
    standardDeviation?: Prisma.Decimal;
    isActive?: boolean;
}
export interface MLPData {
    symbol: string;
    name: string;
    cusip?: string;
    isin?: string;
    securityType: 'MLP';
    exchange: string;
    currency?: string;
    country?: string;
    mlpType: 'ENERGY' | 'NATURAL_RESOURCES' | 'INFRASTRUCTURE' | 'REAL_ESTATE' | 'OTHER';
    businessDescription: string;
    sector: string;
    subSector?: string;
    marketCap: Prisma.Decimal;
    distributionYield?: Prisma.Decimal;
    distributionFrequency?: 'MONTHLY' | 'QUARTERLY' | 'SEMI_ANNUAL' | 'ANNUAL';
    distributionCoverage?: Prisma.Decimal;
    distributionGrowthRate?: Prisma.Decimal;
    distributableCashFlow?: Prisma.Decimal;
    ebitda?: Prisma.Decimal;
    debtToEbitda?: Prisma.Decimal;
    returnOnInvestedCapital?: Prisma.Decimal;
    pipelineMiles?: Prisma.Decimal;
    storageCapacity?: Prisma.Decimal;
    processingCapacity?: Prisma.Decimal;
    operatingRegions?: string[];
    assetLocations?: string[];
    generalPartner: string;
    incentiveDistributionRights?: boolean;
    managementFee?: Prisma.Decimal;
    k1Eligible: boolean;
    qualifiedIncome?: Prisma.Decimal;
    totalReturn1Y?: Prisma.Decimal;
    totalReturn3Y?: Prisma.Decimal;
    totalReturn5Y?: Prisma.Decimal;
    beta?: Prisma.Decimal;
    standardDeviation?: Prisma.Decimal;
    isActive?: boolean;
}
export declare class REITsService {
    private prisma;
    constructor(prisma: PrismaClient);
    upsertREIT(reitData: REITData): Promise<Security>;
    upsertMLP(mlpData: MLPData): Promise<Security>;
    searchREITsAndMLPs(filters: {
        query?: string;
        securityType?: 'REIT' | 'MLP';
        reitType?: 'EQUITY_REIT' | 'MORTGAGE_REIT' | 'HYBRID_REIT';
        mlpType?: 'ENERGY' | 'NATURAL_RESOURCES' | 'INFRASTRUCTURE' | 'REAL_ESTATE' | 'OTHER';
        propertyTypes?: string[];
        minMarketCap?: number;
        maxMarketCap?: number;
        minDividendYield?: number;
        maxPriceToFFO?: number;
        geographicFocus?: string;
        sector?: string;
        limit?: number;
    }): Promise<any[]>;
    getREITOrMLPDetails(symbol: string): Promise<any>;
    private storeREITMetadata;
    private getREITMetadata;
}
//# sourceMappingURL=reitsService.d.ts.map