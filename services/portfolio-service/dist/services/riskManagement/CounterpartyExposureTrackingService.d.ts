import { PrismaClient } from '@prisma/client';
import { KafkaProducer } from '../../utils/kafka/producer';
import { Logger } from '../../utils/logger';
import { CounterpartyExposureAssessment, CounterpartyExposureRequest } from '../../models/riskManagement/RiskManagement';
export declare class CounterpartyExposureTrackingService {
    private prisma;
    private kafkaProducer;
    private logger;
    constructor(prisma: PrismaClient, kafkaProducer: KafkaProducer, logger: Logger);
    trackCounterpartyExposure(request: CounterpartyExposureRequest): Promise<CounterpartyExposureAssessment>;
    trackAllCounterpartyExposures(request: Omit<CounterpartyExposureRequest, 'counterpartyId'>): Promise<CounterpartyExposureAssessment[]>;
    private getPortfolioData;
    private getCounterpartyData;
    private getMasterAgreements;
    private getNettingAgreements;
    private getCollateralAgreements;
    private calculateCurrentExposures;
    private calculatePotentialFutureExposures;
    private calculatePFE;
    private assessCollateralPositions;
    private calculateNetExposures;
    private calculateExposureAtDefault;
    private calculateCreditEquivalentAmounts;
    private assessMarginRequirements;
    private assessSettlementRisks;
    private calculateExposureMetrics;
    private analyzeExposureConcentration;
    private analyzExposureTrends;
    private generateExposureAlerts;
    private generateRecommendations;
    private isCounterpartyExposure;
    private determineExposureType;
    private calculateNotionalAmount;
    private getMaturityDate;
    private calculateRiskWeight;
    private calculateAddOnFactor;
    private getCreditConversionFactor;
    private getRiskCategory;
    private getAssetVolatility;
    private getTimeToMaturity;
    private simulatePFE;
    private getZScore;
    private groupExposuresByNettingSet;
    private determineNettingSet;
    private getApplicableCollateral;
    private calculateEffectiveMaturity;
    private getCounterpartyRiskWeight;
    private isSettlingToday;
    private calculateTimeZoneRisk;
    private assessPaymentSystemRisk;
    private identifySettlementMitigants;
    private calculateAverageMaturity;
    private calculateExposureVolatility;
    private calculateConcentrationIndex;
    private calculateHerfindahlIndex;
    private calculateDiversificationRatio;
    private assessConcentrationRiskLevel;
    private getExposureLimit;
    private calculateTotalGrossExposure;
    private calculateTotalNetExposure;
    private calculateTotalCollateralValue;
    private calculateExposureAfterCollateral;
    private getAllCounterparties;
    private analyzePortfolioCounterpartyConcentration;
    private storeAssessment;
}
