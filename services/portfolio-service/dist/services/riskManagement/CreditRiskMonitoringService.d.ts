import { PrismaClient } from '@prisma/client';
import { KafkaProducer } from '../../utils/kafka/producer';
import { Logger } from '../../utils/logger';
import { CreditRiskAssessment, CreditRiskRequest } from '../../models/riskManagement/RiskManagement';
export declare class CreditRiskMonitoringService {
    private prisma;
    private kafkaProducer;
    private logger;
    constructor(prisma: PrismaClient, kafkaProducer: KafkaProducer, logger: Logger);
    assessCreditRisk(request: CreditRiskRequest): Promise<CreditRiskAssessment>;
    private getPortfolioData;
    private calculateCreditExposures;
    private analyzeSectorConcentration;
    private assessCounterpartyRisks;
    private calculateCreditMetrics;
    private performMigrationAnalysis;
    private calculateCreditVaR;
    private calculateExpectedLosses;
    private calculateUnexpectedLosses;
    private analyzeCreditSpreads;
    private generateCreditRiskAlerts;
    private generateRecommendations;
    private hasCreditRisk;
    private getCreditRating;
    private getCurrentCreditSpread;
    private calculateDefaultProbability;
    private getRecoveryRate;
    private calculateLossGivenDefault;
    private calculateRiskWeight;
    private isInvestmentGrade;
    private calculateDaysToMaturity;
    private calculateTotalExposure;
    private calculateAverageRating;
    private calculateInvestmentGradePercentage;
    private calculateHighYieldPercentage;
    private calculateUnratedPercentage;
    private determineOverallRiskLevel;
    private calculateWeightedAverageRating;
    private calculateAverageMaturity;
    private calculateAverageDuration;
    private calculateConcentrationIndex;
    private calculateDiversificationRatio;
    private storeAssessment;
    private getCreditMigrationMatrix;
    private calculateMigrationProbabilities;
    private calculateExpectedRatingChanges;
    private calculateDowngradeProbability;
    private calculateUpgradeProbability;
    private calculateStableRatingProbability;
    private runCreditVaRSimulations;
    private calculateLossVariance;
    private calculateDiversificationBenefit;
    private getHistoricalSpreads;
    private calculateAverageSpread;
    private calculateSpreadVolatility;
    private calculateSpreadPercentile;
    private calculateSpreadZScore;
    private calculateSpreadTrend;
    private calculateSectorAverageRating;
    private determineSectorRiskLevel;
    private calculateAverageRatingForExposures;
    private calculateIssuerDefaultProbability;
    private determineCounterpartyRiskLevel;
    private getLastRatingChange;
    private getWatchlistStatus;
    private calculateAverageDefaultProbability;
    private calculatePortfolioSpread;
    private calculatePortfolioModifiedDuration;
    private calculateCreditBeta;
    private calculateTrackingError;
}
