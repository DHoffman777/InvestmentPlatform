import { PrismaClient } from '@prisma/client';
import { KafkaService } from '../../utils/kafka-mock';
import { VaRCalculationRequest, VaRResult } from '../../models/riskManagement/RiskManagement';
export declare class VaRCalculationService {
    private prisma;
    private kafkaService;
    constructor(prisma: PrismaClient, kafkaService: KafkaService);
    calculateVaR(request: VaRCalculationRequest): Promise<VaRResult>;
    private calculateParametricVaR;
    private calculateHistoricalVaR;
    private calculateMonteCarloVaR;
    private calculateComponentVaR;
    private calculateMarginalVaR;
    private calculateIncrementalVaR;
    private performBacktesting;
    private performKupiecTest;
    private performChristoffersenTest;
    private getPortfolioData;
    private getMarketData;
    private assessDataQuality;
    private getModelAssumptions;
    private extractReturns;
    private calculatePortfolioWeights;
    private calculateCovarianceMatrix;
    private calculatePortfolioVariance;
    private getTimeAdjustment;
    private getZScore;
    private calculateUndiversifiedVaR;
    private storeVaRResult;
    private publishVaREvent;
    private getHistoricalReturns;
    private calculatePortfolioHistoricalReturns;
    private getPercentileIndex;
    private calculateCorrelationMatrix;
    private calculateAssetVolatilities;
    private generateCorrelatedRandomNumbers;
    private normalRandom;
    private calculateSimulatedPortfolioReturn;
    private chiSquareCDF;
    private groupByAssetClass;
    private calculateSubPortfolioVaR;
    private calculateUndiversifiedHistoricalVaR;
    private calculateUndiversifiedMonteCarloVaR;
    private getActualPortfolioReturns;
}
