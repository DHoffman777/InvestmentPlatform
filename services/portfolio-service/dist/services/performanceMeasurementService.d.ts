import { PrismaClient } from '@prisma/client';
import { PerformanceAttribution, BenchmarkComparison, CashFlowTiming, CalculatePerformanceRequest, PerformanceCalculationResult } from '../models/performance/PerformanceMeasurement';
export declare class PerformanceMeasurementService {
    private prisma;
    private kafkaService;
    constructor(prisma: PrismaClient, kafkaService: any);
    calculatePerformance(request: CalculatePerformanceRequest, tenantId: string, userId: string): Promise<PerformanceCalculationResult>;
    calculateTimeWeightedReturn(portfolio: any, beginningValue: number, endingValue: number, periodStart: Date, periodEnd: Date, cashFlows: any, cashFlowTiming: CashFlowTiming): Promise<number>;
    calculateMoneyWeightedReturn(beginningValue: number, endingValue: number, cashFlows: any): Promise<number>;
    calculateModifiedDietz(beginningValue: number, endingValue: number, cashFlows: any, periodStart: Date, periodEnd: Date): Promise<number>;
    calculateRiskMetrics(portfolioId: string, periodStart: Date, periodEnd: Date, tenantId: string): Promise<any>;
    calculateRiskAdjustedMetrics(portfolioReturn: number, volatility: number, downsideDeviation: number, maxDrawdown: number, tenantId: string): Promise<any>;
    calculateBenchmarkComparison(portfolioId: string, benchmarkId: string, periodStart: Date, periodEnd: Date, portfolioReturn: number, portfolioVolatility: number, tenantId: string, userId: string): Promise<BenchmarkComparison>;
    calculatePerformanceAttribution(performancePeriodId: string, portfolioId: string, periodStart: Date, periodEnd: Date, benchmarkId: string | undefined, tenantId: string, userId: string): Promise<PerformanceAttribution>;
    private calculateSimpleReturn;
    private calculateNetReturn;
    private calculateIRR;
    private calculateMaxDrawdown;
    private daysBetween;
    private getCashFlowsForDate;
    private calculateDataQualityScore;
    private hasSignificantCashFlows;
    private getPortfolioWithTransactions;
    private getPortfolioValue;
    private getCashFlows;
    private calculateFees;
    private getDailyPortfolioValues;
    private getDailyReturns;
    private getHighWaterMark;
    private isRebalancingPeriod;
    private getRiskFreeRate;
    private getBenchmarkReturn;
    private getBenchmarkVolatility;
    private calculateTrackingError;
    private calculateCorrelation;
    private calculateBeta;
    private calculateCaptureRatios;
    private calculateHitRate;
    private calculateSharpeRatio;
    private getPortfolioHoldings;
    private getBenchmarkHoldings;
    private calculateSectorAttribution;
}
