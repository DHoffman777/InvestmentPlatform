import { PrismaClient } from '@prisma/client';
import { KafkaService } from '../../utils/kafka-mock';
import { AlternativeInvestment, AlternativeInvestmentSearchRequest, AlternativeInvestmentSearchResponse, CreateAlternativeInvestmentRequest, CapitalCall, Distribution, NAVUpdate, JCurveAnalysis, AlternativeInvestmentPosition, FundAnalytics, PortfolioAlternativesAnalytics, PortfolioCompany, ESGMetrics } from '../../models/alternatives/AlternativeInvestments';
export declare class AlternativeInvestmentsService {
    private prisma;
    private kafkaService;
    constructor(prisma: PrismaClient, kafkaService: KafkaService);
    createInvestment(request: CreateAlternativeInvestmentRequest, tenantId: string, userId: string): Promise<AlternativeInvestment>;
    getInvestment(investmentId: string, tenantId: string): Promise<AlternativeInvestment | null>;
    updateInvestment(investmentId: string, updates: Partial<AlternativeInvestment>, tenantId: string, userId: string): Promise<AlternativeInvestment>;
    searchInvestments(request: AlternativeInvestmentSearchRequest): Promise<AlternativeInvestmentSearchResponse>;
    processCapitalCall(investmentId: string, callData: {
        callNumber: number;
        callAmount: number;
        dueDate: Date;
        purpose: string;
        managementFeeAmount?: number;
        expenseAmount?: number;
    }, tenantId: string, userId: string): Promise<CapitalCall>;
    fundCapitalCall(callId: string, fundedAmount: number, tenantId: string, userId: string): Promise<CapitalCall>;
    processDistribution(investmentId: string, distributionData: {
        distributionNumber: number;
        totalAmount: number;
        paymentDate: Date;
        taxableAmount?: number;
        returnOfCapital?: number;
        capitalGain?: number;
    }, tenantId: string, userId: string): Promise<Distribution>;
    updateNAV(investmentId: string, navData: {
        asOfDate: Date;
        netAssetValue: number;
        grossAssetValue: number;
        totalLiabilities: number;
        unrealizedGain: number;
        realizedGain: number;
        irr?: number;
        multiple?: number;
    }, tenantId: string, userId: string): Promise<NAVUpdate>;
    generateJCurveAnalysis(investmentId: string, analysisParams: {
        timeHorizon: number;
        projectedFinalIRR: number;
        projectedFinalMultiple: number;
    }, tenantId: string, userId: string): Promise<JCurveAnalysis>;
    addPortfolioCompany(investmentId: string, companyData: Omit<PortfolioCompany, 'id' | 'investmentId' | 'tenantId' | 'createdAt' | 'updatedAt'>, tenantId: string, userId: string): Promise<PortfolioCompany>;
    createPosition(investmentId: string, portfolioId: string, commitmentAmount: number, tenantId: string, userId: string): Promise<AlternativeInvestmentPosition>;
    generateFundAnalytics(investmentId: string, asOfDate: Date, tenantId: string): Promise<FundAnalytics>;
    generatePortfolioAnalytics(portfolioId: string, asOfDate: Date, tenantId: string): Promise<PortfolioAlternativesAnalytics>;
    updateESGMetrics(investmentId: string, esgData: Omit<ESGMetrics, 'investmentId' | 'lastUpdated'>, tenantId: string): Promise<ESGMetrics>;
    private validateInvestmentData;
    private storeInvestment;
    private storeCapitalCall;
    private storeDistribution;
    private storeNAVUpdate;
    private storeJCurveAnalysis;
    private storePortfolioCompany;
    private storePosition;
    private storeESGMetrics;
    private setupFundMonitoring;
    private publishInvestmentEvent;
    private publishCapitalCallEvent;
    private publishDistributionEvent;
    private publishNAVEvent;
    private publishPortfolioCompanyEvent;
    private publishPositionEvent;
    private publishESGEvent;
    private calculateJCurvePoints;
    private calculatePerformanceSummary;
    private getBenchmarkComparison;
    private calculateRiskMetrics;
    private calculateConcentrationMetrics;
    private calculateCashFlowMetrics;
    private getPortfolioPositions;
    private calculatePortfolioSummary;
    private calculateDiversification;
    private calculatePortfolioPerformance;
    private calculateLiquidityProfile;
    private calculatePortfolioRisk;
    private updateInvestmentCallTotals;
    private updateInvestmentFundedTotals;
    private updateInvestmentDistributionTotals;
    private updateInvestmentCurrentNAV;
    private recalculatePositionValues;
    private processDistributionToPositions;
    private notifyCapitalCall;
}
