import { PrismaClient } from '@prisma/client';
import { getKafkaService } from '../utils/kafka-mock';
import { GreeksCalculation, GreeksCalculationRequest, ImpliedVolatilityAnalysis, ImpliedVolatilityRequest, OptionStrategy, StrategyBuilderRequest, MarginCalculationRequest, MarginCalculationResult, MarkToMarketValuation, DerivativesPortfolioAnalytics, DerivativesSearchRequest, DerivativesSearchResult } from '../models/derivatives/DerivativesAnalytics';
export declare class DerivativesAnalyticsService {
    private prisma;
    private kafkaService;
    constructor(prisma: PrismaClient, kafkaService: ReturnType<typeof getKafkaService>);
    calculateGreeks(request: GreeksCalculationRequest, tenantId: string, userId: string): Promise<GreeksCalculation>;
    private calculateBlackScholesGreeks;
    private calculateBinomialGreeks;
    private calculateMonteCarloGreeks;
    calculateImpliedVolatility(request: ImpliedVolatilityRequest, tenantId: string, userId: string): Promise<ImpliedVolatilityAnalysis>;
    buildOptionStrategy(request: StrategyBuilderRequest, tenantId: string, userId: string): Promise<OptionStrategy>;
    calculateMargin(request: MarginCalculationRequest, tenantId: string, userId: string): Promise<MarginCalculationResult>;
    calculateMarkToMarket(securityId: string, tenantId: string, userId: string): Promise<MarkToMarketValuation>;
    calculatePortfolioAnalytics(portfolioId: string, tenantId: string, userId: string): Promise<DerivativesPortfolioAnalytics>;
    searchDerivatives(request: DerivativesSearchRequest, tenantId: string): Promise<DerivativesSearchResult>;
    private normalCDF;
    private normalPDF;
    private erf;
    private calculateTimeToExpiration;
    private calculateOptionPrice;
    private generateId;
    private getDerivativeInstrument;
    private storeGreeksCalculation;
    private publishGreeksCalculatedEvent;
    private publishImpliedVolatilityEvent;
    private publishStrategyCreatedEvent;
    private buildBinomialPriceTree;
    private buildBinomialOptionTree;
    private buildBinomialOptionTreeWithTime;
    private generateStockPath;
    private generateNormalRandom;
    private buildVolatilityTermStructure;
    private buildStrategyLeg;
    private buildDerivativesSearchQuery;
    private getMarketPrice;
    private getImpliedVolatility;
    private getRiskFreeRate;
    private getDividendYield;
    private calculateExercisePayoff;
    private recordExerciseEvent;
    private recordAssignmentEvent;
    private buildBinomialOptionTreeWithVol;
    private buildBinomialOptionTreeWithRate;
    private calculateTimeToExpiry;
    private calculateVolatilitySmile;
    private calculateOptionPayoff;
    private solveImpliedVolatility;
    private getHistoricalVolatility;
    private getImpliedVolatilityHistory;
    private calculatePercentileRank;
    private calculateStandardDeviation;
    private getATMImpliedVolatility;
    private calculateVolatilitySkew;
    private storeImpliedVolatilityAnalysis;
    private validateStrategyRequest;
    private getUnderlyingPrice;
    private calculateStrategyMetrics;
    private calculatePositionMargin;
    private calculateSPANMargin;
    private generateStrategyName;
    private generateStrategyDescription;
    private storeOptionStrategy;
    private calculateNetLiquidationValue;
    private calculatePortfolioRisk;
    private calculateConcentrationRisk;
    private calculateLiquidityRisk;
    private storeMarginCalculation;
    private calculateTheoreticalPrice;
    private getPreviousMarkToMarket;
    private calculateIntrinsicValue;
    private calculateDeltaPnL;
    private calculateGammaPnL;
    private calculateThetaPnL;
    private calculateVegaPnL;
    private calculateRhoPnL;
    private storeMarkToMarketValuation;
    private getPortfolioDerivativePositions;
    private calculatePortfolioGreeks;
    private calculatePortfolioVaR;
    private calculateMaxDrawdown;
    private calculateSharpeRatio;
    private getActiveStrategies;
    private analyzeStrategyBreakdown;
    private calculateMarginUtilization;
    private analyzeExpirations;
    private calculatePortfolioPerformance;
    private calculateOptionsAllocation;
    private calculateFuturesAllocation;
    private calculateOtherDerivativesAllocation;
    private assessDataQuality;
    private generatePortfolioWarnings;
    private storePortfolioAnalytics;
    private publishPortfolioAnalyticsEvent;
    private calculateSearchAggregateMetrics;
    private calculateBinomialOptionPrice;
}
