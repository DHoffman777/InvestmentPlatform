const axios = require('axios');
const fs = require('fs').promises;
const path = require('path');
const { execSync } = require('child_process');

/**
 * Investment Platform Security Vulnerability Scanner
 * A comprehensive security assessment tool for the investment management platform
 */
class VulnerabilityScanner {
  constructor() {
    this.results = {
      timestamp: new Date().toISOString(),
      summary: {
        critical: 0,
        high: 0,
        medium: 0,
        low: 0,
        info: 0
      },
      vulnerabilities: [],
      recommendations: []
    };
    
    this.baseUrl = process.env.PLATFORM_BASE_URL || 'http://localhost:3000';
    this.apiKey = process.env.SECURITY_API_KEY || '';
  }

  // Main scanning function
  async runScan() {
    console.log('🔍 Starting Investment Platform Security Scan...');
    console.log(`Target: ${this.baseUrl}`);
    console.log(`Timestamp: ${this.results.timestamp}\n`);

    try {
      // Infrastructure scans
      await this.scanNetworkSecurity();
      await this.scanSSLConfiguration();
      await this.scanHTTPHeaders();
      
      // Application security scans
      await this.scanAuthentication();
      await this.scanAuthorization();
      await this.scanInputValidation();
      await this.scanDataEncryption();
      
      // API security scans
      await this.scanAPIEndpoints();
      await this.scanRateLimit();
      await this.scanCORS();
      
      // Database security scans
      await this.scanDatabaseSecurity();
      await this.scanDataLeakage();
      
      // Financial services specific scans
      await this.scanFinancialCompliance();
      await this.scanDataPrivacy();
      await this.scanAuditLogging();
      
      // Generate report
      await this.generateReport();
      
      console.log('\n✅ Security scan completed successfully');
      console.log(`📊 Found ${this.results.vulnerabilities.length} total issues`);
      console.log(`🔴 Critical: ${this.results.summary.critical}`);
      console.log(`🟠 High: ${this.results.summary.high}`);
      console.log(`🟡 Medium: ${this.results.summary.medium}`);
      console.log(`🔵 Low: ${this.results.summary.low}`);
      
    } catch (error) {
      console.error('❌ Scan failed:', error.message);
      throw error;
    }
  }

  // Network security assessment
  async scanNetworkSecurity() {
    console.log('🌐 Scanning network security...');
    
    try {
      // Check for open ports
      const commonPorts = [22, 23, 25, 53, 80, 110, 135, 139, 143, 443, 993, 995, 1433, 1521, 3306, 3389, 5432, 5984, 6379, 27017];
      const openPorts = [];
      
      for (const port of commonPorts) {
        try {
          const response = await axios.get(`${this.baseUrl.replace(/:\d+/, '')}:${port}`, {
            timeout: 1000,
            validateStatus: () => true
          });
          openPorts.push(port);
        } catch (error) {
          // Port is closed or filtered
        }
      }
      
      if (openPorts.length > 2) {
        this.addVulnerability({
          category: 'Network Security',
          severity: 'medium',
          title: 'Multiple Open Ports Detected',
          description: `Found ${openPorts.length} open ports: ${openPorts.join(', ')}`,
          recommendation: 'Close unnecessary ports and implement firewall rules',
          cwe: 'CWE-200'
        });
      }

      // Check for network segmentation
      this.addRecommendation({
        category: 'Network Security',
        title: 'Implement Network Segmentation',
        description: 'Segregate financial services components into separate network zones',
        priority: 'high'
      });

    } catch (error) {
      console.error('Network scan error:', error.message);
    }
  }

  // SSL/TLS configuration assessment
  async scanSSLConfiguration() {
    console.log('🔒 Scanning SSL/TLS configuration...');
    
    try {
      const response = await axios.get(this.baseUrl, {
        httpsAgent: new (require('https').Agent)({
          rejectUnauthorized: false
        })
      });

      // Check for HTTPS enforcement
      if (!this.baseUrl.startsWith('https://')) {
        this.addVulnerability({
          category: 'SSL/TLS',
          severity: 'high',
          title: 'HTTPS Not Enforced',
          description: 'Application is not enforcing HTTPS connections',
          recommendation: 'Implement HTTPS redirect and HSTS headers',
          cwe: 'CWE-319'
        });
      }

      // Check SSL headers
      const headers = response.headers;
      if (!headers['strict-transport-security']) {
        this.addVulnerability({
          category: 'SSL/TLS',
          severity: 'medium',
          title: 'Missing HSTS Header',
          description: 'Strict-Transport-Security header not found',
          recommendation: 'Implement HSTS with appropriate max-age',
          cwe: 'CWE-319'
        });
      }

    } catch (error) {
      console.error('SSL scan error:', error.message);
    }
  }

  // HTTP security headers assessment
  async scanHTTPHeaders() {
    console.log('📋 Scanning HTTP security headers...');
    
    try {
      const response = await axios.get(this.baseUrl);
      const headers = response.headers;
      
      const securityHeaders = {
        'x-frame-options': 'Missing X-Frame-Options header',
        'x-content-type-options': 'Missing X-Content-Type-Options header',
        'x-xss-protection': 'Missing X-XSS-Protection header',
        'content-security-policy': 'Missing Content-Security-Policy header',
        'referrer-policy': 'Missing Referrer-Policy header'
      };

      Object.keys(securityHeaders).forEach(header => {
        if (!headers[header]) {
          this.addVulnerability({
            category: 'HTTP Headers',
            severity: 'medium',
            title: securityHeaders[header],
            description: `${header} header is not set`,
            recommendation: `Implement ${header} header with appropriate value`,
            cwe: 'CWE-693'
          });
        }
      });

    } catch (error) {
      console.error('Headers scan error:', error.message);
    }
  }

  // Authentication security assessment
  async scanAuthentication() {
    console.log('🔐 Scanning authentication mechanisms...');
    
    try {
      // Test for weak password policies
      const weakPasswords = ['password', '123456', 'admin', 'test'];
      
      for (const password of weakPasswords) {
        try {
          const response = await axios.post(`${this.baseUrl}/api/auth/login`, {
            email: 'test@example.com',
            password: password
          }, {
            validateStatus: () => true
          });
          
          if (response.status === 200) {
            this.addVulnerability({
              category: 'Authentication',
              severity: 'critical',
              title: 'Weak Default Credentials',
              description: `Default credentials accepted: ${password}`,
              recommendation: 'Enforce strong password policies and remove default accounts',
              cwe: 'CWE-521'
            });
          }
        } catch (error) {
          // Expected for secure systems
        }
      }

      // Test for account lockout
      for (let i = 0; i < 10; i++) {
        try {
          await axios.post(`${this.baseUrl}/api/auth/login`, {
            email: 'nonexistent@example.com',
            password: 'wrongpassword'
          }, {
            validateStatus: () => true
          });
        } catch (error) {
          // Continue testing
        }
      }

      this.addRecommendation({
        category: 'Authentication',
        title: 'Implement Multi-Factor Authentication',
        description: 'Enable MFA for all user accounts, especially privileged accounts',
        priority: 'critical'
      });

    } catch (error) {
      console.error('Authentication scan error:', error.message);
    }
  }

  // Authorization and access control assessment
  async scanAuthorization() {
    console.log('👤 Scanning authorization controls...');
    
    try {
      // Test for privilege escalation
      const testEndpoints = [
        '/api/admin/users',
        '/api/admin/config',
        '/api/portfolios/all',
        '/api/transactions/all'
      ];

      for (const endpoint of testEndpoints) {
        try {
          const response = await axios.get(`${this.baseUrl}${endpoint}`, {
            validateStatus: () => true
          });
          
          if (response.status === 200) {
            this.addVulnerability({
              category: 'Authorization',
              severity: 'high',
              title: 'Unauthorized Access to Sensitive Endpoint',
              description: `Endpoint ${endpoint} accessible without authentication`,
              recommendation: 'Implement proper authorization checks',
              cwe: 'CWE-862'
            });
          }
        } catch (error) {
          // Expected for secure endpoints
        }
      }

      // Test for IDOR vulnerabilities
      const testIds = ['1', '2', '100', '999', '../admin', 'null', 'undefined'];
      
      for (const id of testIds) {
        try {
          const response = await axios.get(`${this.baseUrl}/api/portfolios/${id}`, {
            validateStatus: () => true
          });
          
          if (response.status === 200 && response.data) {
            this.addVulnerability({
              category: 'Authorization',
              severity: 'high',
              title: 'Insecure Direct Object Reference',
              description: `Portfolio ${id} accessible without proper authorization`,
              recommendation: 'Implement proper access controls and object-level authorization',
              cwe: 'CWE-639'
            });
          }
        } catch (error) {
          // Expected for secure systems
        }
      }

    } catch (error) {
      console.error('Authorization scan error:', error.message);
    }
  }

  // Input validation assessment
  async scanInputValidation() {
    console.log('✏️ Scanning input validation...');
    
    try {
      const sqlPayloads = [
        "' OR '1'='1",
        "'; DROP TABLE users; --",
        "' UNION SELECT * FROM users --"
      ];

      const xssPayloads = [
        "<script>alert('XSS')</script>",
        "javascript:alert('XSS')",
        "<img src=x onerror=alert('XSS')>"
      ];

      // Test SQL injection
      for (const payload of sqlPayloads) {
        try {
          const response = await axios.post(`${this.baseUrl}/api/portfolios/search`, {
            query: payload
          }, {
            validateStatus: () => true
          });
          
          if (response.data && typeof response.data === 'string' && response.data.includes('SQL')) {
            this.addVulnerability({
              category: 'Input Validation',
              severity: 'critical',
              title: 'SQL Injection Vulnerability',
              description: 'Application vulnerable to SQL injection attacks',
              recommendation: 'Use parameterized queries and input validation',
              cwe: 'CWE-89'
            });
            break;
          }
        } catch (error) {
          // Continue testing
        }
      }

      // Test XSS
      for (const payload of xssPayloads) {
        try {
          const response = await axios.post(`${this.baseUrl}/api/portfolios`, {
            name: payload,
            description: 'Test portfolio'
          }, {
            validateStatus: () => true
          });
          
          if (response.data && JSON.stringify(response.data).includes(payload)) {
            this.addVulnerability({
              category: 'Input Validation',
              severity: 'high',
              title: 'Cross-Site Scripting (XSS)',
              description: 'Application vulnerable to XSS attacks',
              recommendation: 'Implement proper input validation and output encoding',
              cwe: 'CWE-79'
            });
            break;
          }
        } catch (error) {
          // Continue testing
        }
      }

    } catch (error) {
      console.error('Input validation scan error:', error.message);
    }
  }

  // Data encryption assessment
  async scanDataEncryption() {
    console.log('🔐 Scanning data encryption...');
    
    try {
      // Check for sensitive data transmission
      const sensitiveEndpoints = [
        '/api/auth/login',
        '/api/users/profile',
        '/api/portfolios',
        '/api/transactions'
      ];

      for (const endpoint of sensitiveEndpoints) {
        if (!this.baseUrl.startsWith('https://')) {
          this.addVulnerability({
            category: 'Data Encryption',
            severity: 'critical',
            title: 'Sensitive Data Transmitted Over HTTP',
            description: `Endpoint ${endpoint} transmits sensitive data over unencrypted connection`,
            recommendation: 'Enforce HTTPS for all sensitive endpoints',
            cwe: 'CWE-319'
          });
        }
      }

      this.addRecommendation({
        category: 'Data Encryption',
        title: 'Implement Database Encryption',
        description: 'Encrypt sensitive data at rest using AES-256 encryption',
        priority: 'high'
      });

    } catch (error) {
      console.error('Encryption scan error:', error.message);
    }
  }

  // API security assessment
  async scanAPIEndpoints() {
    console.log('🔌 Scanning API security...');
    
    try {
      // Test for information disclosure
      const infoEndpoints = [
        '/api/docs',
        '/api/swagger',
        '/api/health',
        '/api/debug',
        '/api/info',
        '/.well-known/openapi.json'
      ];

      for (const endpoint of infoEndpoints) {
        try {
          const response = await axios.get(`${this.baseUrl}${endpoint}`, {
            validateStatus: () => true
          });
          
          if (response.status === 200 && response.data) {
            this.addVulnerability({
              category: 'Information Disclosure',
              severity: 'low',
              title: 'API Documentation Publicly Accessible',
              description: `Endpoint ${endpoint} exposes API documentation`,
              recommendation: 'Restrict access to API documentation in production',
              cwe: 'CWE-200'
            });
          }
        } catch (error) {
          // Expected for secure systems
        }
      }

      // Test for API versioning issues
      const versions = ['v1', 'v2', 'v3', 'beta', 'test'];
      for (const version of versions) {
        try {
          const response = await axios.get(`${this.baseUrl}/api/${version}/portfolios`, {
            validateStatus: () => true
          });
          
          if (response.status === 200) {
            this.addVulnerability({
              category: 'API Security',
              severity: 'medium',
              title: 'Multiple API Versions Exposed',
              description: `API version ${version} is accessible`,
              recommendation: 'Deprecate old API versions and implement proper versioning strategy',
              cwe: 'CWE-200'
            });
          }
        } catch (error) {
          // Expected behavior
        }
      }

    } catch (error) {
      console.error('API scan error:', error.message);
    }
  }

  // Rate limiting assessment
  async scanRateLimit() {
    console.log('⏱️ Scanning rate limiting...');
    
    try {
      const requests = [];
      for (let i = 0; i < 100; i++) {
        requests.push(
          axios.get(`${this.baseUrl}/api/portfolios`, {
            validateStatus: () => true,
            timeout: 5000
          }).catch(() => ({ status: 0 }))
        );
      }

      const responses = await Promise.all(requests);
      const successfulRequests = responses.filter(r => r.status === 200).length;
      
      if (successfulRequests > 50) {
        this.addVulnerability({
          category: 'Rate Limiting',
          severity: 'medium',
          title: 'Insufficient Rate Limiting',
          description: `${successfulRequests} out of 100 requests succeeded`,
          recommendation: 'Implement proper rate limiting to prevent abuse',
          cwe: 'CWE-770'
        });
      }

    } catch (error) {
      console.error('Rate limit scan error:', error.message);
    }
  }

  // CORS configuration assessment
  async scanCORS() {
    console.log('🌐 Scanning CORS configuration...');
    
    try {
      const response = await axios.options(this.baseUrl, {
        headers: {
          'Origin': 'https://evil.com',
          'Access-Control-Request-Method': 'POST'
        },
        validateStatus: () => true
      });

      const corsHeaders = response.headers;
      
      if (corsHeaders['access-control-allow-origin'] === '*') {
        this.addVulnerability({
          category: 'CORS',
          severity: 'medium',
          title: 'Overly Permissive CORS Policy',
          description: 'CORS allows requests from any origin',
          recommendation: 'Restrict CORS to specific trusted domains',
          cwe: 'CWE-346'
        });
      }

      if (corsHeaders['access-control-allow-credentials'] === 'true' && 
          corsHeaders['access-control-allow-origin'] === '*') {
        this.addVulnerability({
          category: 'CORS',
          severity: 'high',
          title: 'Dangerous CORS Configuration',
          description: 'CORS allows credentials with wildcard origin',
          recommendation: 'Never use wildcard origin with credentials',
          cwe: 'CWE-346'
        });
      }

    } catch (error) {
      console.error('CORS scan error:', error.message);
    }
  }

  // Database security assessment
  async scanDatabaseSecurity() {
    console.log('🗃️ Scanning database security...');
    
    try {
      // Test for database information disclosure
      const dbEndpoints = [
        '/phpmyadmin',
        '/adminer',
        '/db',
        '/database',
        '/.env'
      ];

      for (const endpoint of dbEndpoints) {
        try {
          const response = await axios.get(`${this.baseUrl}${endpoint}`, {
            validateStatus: () => true
          });
          
          if (response.status === 200) {
            this.addVulnerability({
              category: 'Database Security',
              severity: 'critical',
              title: 'Database Management Interface Exposed',
              description: `Database interface accessible at ${endpoint}`,
              recommendation: 'Remove or secure database management interfaces',
              cwe: 'CWE-200'
            });
          }
        } catch (error) {
          // Expected for secure systems
        }
      }

      this.addRecommendation({
        category: 'Database Security',
        title: 'Implement Database Auditing',
        description: 'Enable comprehensive database audit logging for financial transactions',
        priority: 'high'
      });

    } catch (error) {
      console.error('Database scan error:', error.message);
    }
  }

  // Data leakage assessment
  async scanDataLeakage() {
    console.log('💧 Scanning for data leakage...');
    
    try {
      const sensitiveFiles = [
        '/.env',
        '/config.json',
        '/package.json',
        '/composer.json',
        '/web.config',
        '/.git/config',
        '/backup.sql',
        '/database.sql'
      ];

      for (const file of sensitiveFiles) {
        try {
          const response = await axios.get(`${this.baseUrl}${file}`, {
            validateStatus: () => true
          });
          
          if (response.status === 200 && response.data) {
            this.addVulnerability({
              category: 'Data Leakage',
              severity: 'high',
              title: 'Sensitive File Accessible',
              description: `Sensitive file exposed: ${file}`,
              recommendation: 'Remove or restrict access to sensitive files',
              cwe: 'CWE-200'
            });
          }
        } catch (error) {
          // Expected for secure systems
        }
      }

    } catch (error) {
      console.error('Data leakage scan error:', error.message);
    }
  }

  // Financial services compliance assessment
  async scanFinancialCompliance() {
    console.log('💰 Scanning financial compliance...');
    
    this.addRecommendation({
      category: 'Financial Compliance',
      title: 'SOC 2 Type II Compliance',
      description: 'Implement SOC 2 Type II controls for security, availability, and confidentiality',
      priority: 'critical'
    });

    this.addRecommendation({
      category: 'Financial Compliance',
      title: 'PCI DSS Compliance',
      description: 'If processing credit card data, ensure PCI DSS compliance',
      priority: 'high'
    });

    this.addRecommendation({
      category: 'Financial Compliance',
      title: 'SEC Cybersecurity Rules',
      description: 'Comply with SEC cybersecurity disclosure requirements',
      priority: 'high'
    });
  }

  // Data privacy assessment
  async scanDataPrivacy() {
    console.log('🔒 Scanning data privacy controls...');
    
    this.addRecommendation({
      category: 'Data Privacy',
      title: 'GDPR Compliance',
      description: 'Implement GDPR controls for EU client data protection',
      priority: 'high'
    });

    this.addRecommendation({
      category: 'Data Privacy',
      title: 'CCPA Compliance',
      description: 'Implement CCPA controls for California resident data protection',
      priority: 'medium'
    });
  }

  // Audit logging assessment
  async scanAuditLogging() {
    console.log('📝 Scanning audit logging...');
    
    this.addRecommendation({
      category: 'Audit Logging',
      title: 'Comprehensive Audit Trail',
      description: 'Log all financial transactions, user access, and system changes',
      priority: 'critical'
    });

    this.addRecommendation({
      category: 'Audit Logging',
      title: 'Log Integrity Protection',
      description: 'Implement tamper-evident logging with digital signatures',
      priority: 'high'
    });
  }

  // Add vulnerability to results
  addVulnerability(vuln) {
    this.results.vulnerabilities.push({
      ...vuln,
      id: `VULN-${Date.now()}-${Math.random().toString(36).substr(2, 5)}`
    });
    this.results.summary[vuln.severity]++;
  }

  // Add recommendation to results
  addRecommendation(rec) {
    this.results.recommendations.push({
      ...rec,
      id: `REC-${Date.now()}-${Math.random().toString(36).substr(2, 5)}`
    });
  }

  // Generate security report
  async generateReport() {
    console.log('📄 Generating security report...');
    
    const reportDir = path.join(__dirname, 'reports');
    await fs.mkdir(reportDir, { recursive: true });
    
    const reportFile = path.join(reportDir, `security-report-${Date.now()}.json`);
    await fs.writeFile(reportFile, JSON.stringify(this.results, null, 2));
    
    // Generate human-readable report
    const htmlReport = this.generateHTMLReport();
    const htmlFile = path.join(reportDir, `security-report-${Date.now()}.html`);
    await fs.writeFile(htmlFile, htmlReport);
    
    console.log(`📊 Reports generated:`);
    console.log(`  JSON: ${reportFile}`);
    console.log(`  HTML: ${htmlFile}`);
  }

  // Generate HTML report
  generateHTMLReport() {
    const severityColors = {
      critical: '#dc3545',
      high: '#fd7e14',
      medium: '#ffc107',
      low: '#17a2b8',
      info: '#6c757d'
    };

    return `
<!DOCTYPE html>
<html>
<head>
    <title>Investment Platform Security Report</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .header { background: #f8f9fa; padding: 20px; border-radius: 5px; margin-bottom: 20px; }
        .summary { display: flex; gap: 20px; margin-bottom: 30px; }
        .card { flex: 1; padding: 15px; border-radius: 5px; text-align: center; color: white; }
        .critical { background-color: ${severityColors.critical}; }
        .high { background-color: ${severityColors.high}; }
        .medium { background-color: ${severityColors.medium}; }
        .low { background-color: ${severityColors.low}; }
        .vulnerability { margin: 15px 0; padding: 15px; border-left: 4px solid; background: #f8f9fa; }
        .vuln-critical { border-color: ${severityColors.critical}; }
        .vuln-high { border-color: ${severityColors.high}; }
        .vuln-medium { border-color: ${severityColors.medium}; }
        .vuln-low { border-color: ${severityColors.low}; }
        .recommendation { margin: 10px 0; padding: 10px; background: #e7f3ff; border-left: 4px solid #0066cc; }
    </style>
</head>
<body>
    <div class="header">
        <h1>🔒 Investment Platform Security Assessment Report</h1>
        <p><strong>Generated:</strong> ${this.results.timestamp}</p>
        <p><strong>Target:</strong> ${this.baseUrl}</p>
    </div>

    <div class="summary">
        <div class="card critical">
            <h3>${this.results.summary.critical}</h3>
            <p>Critical</p>
        </div>
        <div class="card high">
            <h3>${this.results.summary.high}</h3>
            <p>High</p>
        </div>
        <div class="card medium">
            <h3>${this.results.summary.medium}</h3>
            <p>Medium</p>
        </div>
        <div class="card low">
            <h3>${this.results.summary.low}</h3>
            <p>Low</p>
        </div>
    </div>

    <h2>🚨 Vulnerabilities</h2>
    ${this.results.vulnerabilities.map(vuln => `
        <div class="vulnerability vuln-${vuln.severity}">
            <h3>${vuln.title}</h3>
            <p><strong>Category:</strong> ${vuln.category}</p>
            <p><strong>Severity:</strong> ${vuln.severity.toUpperCase()}</p>
            <p><strong>Description:</strong> ${vuln.description}</p>
            <p><strong>Recommendation:</strong> ${vuln.recommendation}</p>
            ${vuln.cwe ? `<p><strong>CWE:</strong> ${vuln.cwe}</p>` : ''}
        </div>
    `).join('')}

    <h2>💡 Security Recommendations</h2>
    ${this.results.recommendations.map(rec => `
        <div class="recommendation">
            <h3>${rec.title}</h3>
            <p><strong>Category:</strong> ${rec.category}</p>
            <p><strong>Priority:</strong> ${rec.priority?.toUpperCase() || 'MEDIUM'}</p>
            <p>${rec.description}</p>
        </div>
    `).join('')}

    <div style="margin-top: 40px; padding: 20px; background: #f8f9fa; border-radius: 5px;">
        <h3>📋 Next Steps</h3>
        <ol>
            <li>Address all <strong>Critical</strong> and <strong>High</strong> severity vulnerabilities immediately</li>
            <li>Implement security recommendations based on priority</li>
            <li>Conduct regular security assessments</li>
            <li>Establish a vulnerability management program</li>
            <li>Ensure compliance with financial services regulations</li>
        </ol>
    </div>
</body>
</html>`;
  }
}

// Command line interface
if (require.main === module) {
  const scanner = new VulnerabilityScanner();
  scanner.runScan().catch(console.error);
}

module.exports = VulnerabilityScanner;